/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/DataStructures/DoublyLinkedList.ts":
/*!************************************************!*\
  !*** ./src/DataStructures/DoublyLinkedList.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DoublyLinkedList = void 0;\n/**Implementación estructura DoublyLinkedList\n * Clase 'Node' y 'DoublyLinkedList'\n * @author Vaulentzc\n */\nclass Node {\n    constructor(key) {\n        this.key = key;\n        this.prev = null; //la lista está vacía al principio\n        this.next = null;\n    }\n}\n/**Aquí se implementa la lista doblemente enlazada.*/\nclass DoublyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n    }\n    /** pushfront-Agrega un nodo con un valor al inicio de la lista.*/\n    pushFront(key) {\n        const newNode = new Node(key);\n        if (this.head === null) { //se crea un nuevo nodo y se verifica si la lista está vacía, si es así head y tal apuntan al nuevo nodo\n            this.head = newNode;\n            this.tail = newNode;\n        }\n        else {\n            newNode.next = this.head; //sino, el nuevo nodo se conecta al frente de la lista\n            this.head.prev = newNode;\n            this.head = newNode;\n        }\n    }\n    /** Retorna el valor del primer nodo de la lista.*/\n    topFront() {\n        return this.head !== null ? this.head.key : null;\n    }\n    /** popFront - Elimina un nodo al inicio de la lista.*/\n    popFront() {\n        if (this.head !== null) {\n            this.head = this.head.next;\n            if (this.head !== null) {\n                this.head.prev = null;\n            }\n            else {\n                this.tail = null;\n            }\n        }\n    }\n    /** pushBack - Agrega un nodo con un valor al final de la lista.*/\n    pushBack(key) {\n        const newNode = new Node(key);\n        if (this.tail === null) {\n            this.head = newNode;\n            this.tail = newNode;\n        }\n        else {\n            this.tail.next = newNode; //el nuevo nodo se conecta al final de la lista y se actualizan los punteros\n            newNode.prev = this.tail;\n            this.tail = newNode;\n        }\n    }\n    /** topBack() - Retorna el valor del último nodo de la lista.*/\n    topBack() {\n        return this.tail !== null ? this.tail.key : null;\n    }\n    /** popBack() - elimina el último nodo de la lista, reduciendo así la longitud de la lista.*/\n    popBack() {\n        if (this.tail === null) {\n            throw new Error(\"--- .popBack() inválido. Lista vacía ---\");\n        }\n        else {\n            if (this.head === this.tail) {\n                this.head = null;\n                this.tail = null;\n            }\n            else {\n                this.tail = this.tail.prev;\n                if (this.tail !== null) {\n                    this.tail.next = null;\n                }\n            }\n        }\n    }\n    /** find - Busca un valor específico en la lista y devuelve un booleano indicando\n     * si se encuentra o no.*/\n    find(key) {\n        let current = this.head;\n        while (current !== null) {\n            if (current.key === key) {\n                return true;\n            }\n            current = current.next;\n        }\n        return false;\n    } //se recorre la lista y se verifica si el valor buscado está presente en algún nodo.\n    /** erase - elimina un nodo específico que contiene un valor dado.\n     * Si el valor no se encuentra en la lista, se lanzaun error.\n     */\n    erase(key) {\n        let current = this.head;\n        while (current !== null) {\n            if (current.key === key) {\n                if (current === this.head) {\n                    this.head = current.next;\n                    if (this.head !== null) {\n                        this.head.prev = null;\n                    }\n                    if (current === this.tail) {\n                        this.tail = null;\n                    }\n                }\n                else if (current === this.tail) {\n                    this.tail = current.prev;\n                    if (this.tail !== null) {\n                        this.tail.next = null;\n                    }\n                }\n                else {\n                    current.prev.next = current.next;\n                    current.next.prev = current.prev;\n                }\n                return;\n            }\n            current = current.next;\n        }\n        throw new Error(\"--- .erase() inválido. Elemento no encontrado ---\");\n    } /*se busca el nodo con el valor dado y\n    se elimina de la lista. Si el nodo no se encuentra, se lanza un error.*/\n    /** empty() - sólo verifica si la lista está vacía o no.\n     * Devuelve verdadero si la lista está vacía y falso si contiene al menos un elemento.\n     */\n    empty() {\n        return this.head === null;\n    }\n    /** addBefore() - agrega un nuevo nodo antes de otro nodo específico en la lista.\n     * se busca el nodo deseado y se agrega un nuevo nodo justo antes de este.\n    */\n    addBefore(node, key) {\n        if (node === null) {\n            throw new Error(\"--- .addBefore() inválido. Nodo nulo ---\");\n        }\n        const newNode = new Node(key);\n        if (node === this.head) {\n            newNode.next = this.head;\n            this.head.prev = newNode;\n            this.head = newNode;\n        }\n        else {\n            newNode.prev = node.prev;\n            newNode.next = node;\n            node.prev.next = newNode;\n            node.prev = newNode;\n        }\n    }\n    /** addAfter() - agrega un nuevo nodo después de otro nodo específico en la lista.\n     * se busca el nodo deseado y se agrega un nuevo nodo justo después de este.\n    */\n    addAfter(node, key) {\n        if (node === null) {\n            throw new Error(\"--- .addAfter() inválido. La lista se encuentra vacía ---\");\n        }\n        const newNode = new Node(key);\n        if (node === this.tail) {\n            newNode.prev = this.tail;\n            this.tail.next = newNode;\n            this.tail = newNode;\n        }\n        else {\n            newNode.prev = node;\n            newNode.next = node.next;\n            node.next.prev = newNode;\n            node.next = newNode;\n        }\n    }\n}\nexports.DoublyLinkedList = DoublyLinkedList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/DataStructures/DoublyLinkedList.ts\n");

/***/ }),

/***/ "./src/DataStructures/Queue.ts":
/*!*************************************!*\
  !*** ./src/DataStructures/Queue.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Queue = void 0;\n/**\n * Implementación estructura 'Queue'\n * Mediante clase 'Queue'\n * @author dalopezgu\n */\nclass Queue {\n    /** @constructor */\n    constructor(length) {\n        this.length = length;\n        this.count = 0;\n        this.top = 0;\n        this.rear = 0;\n        this.list = [];\n    }\n    /**@method  full - Notifica si la 'Queue' está llena*/\n    full() {\n        return this.count >= this.length;\n    }\n    /**@method empty - Notifica si la 'Queue' está llena */\n    empty() {\n        return this.count <= 0;\n    }\n    /**@method enqueue - Agrega un elemento a la 'Queue' */\n    enqueue(item) {\n        if (this.full()) {\n            throw new Error(\"---  .enqueue() invalido. Queue llena  ---\");\n        }\n        this.list[this.rear] = item;\n        this.rear = (this.rear + 1) % this.length;\n        this.count++;\n    }\n    /**@method dequeue - Quita elemento de la 'Queue', retornando a la vez este elemento */\n    dequeue() {\n        if (this.empty()) {\n            throw new Error(\"---  .dequeue() invalido. Queue vacia  ---\");\n        }\n        const item = this.list[this.top];\n        this.top = (this.top + 1) % this.length;\n        this.count--;\n        return item;\n    }\n}\nexports.Queue = Queue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRGF0YVN0cnVjdHVyZXMvUXVldWUudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7R0FJRztBQUNILE1BQWEsS0FBSztJQVFkLG1CQUFtQjtJQUVuQixZQUFZLE1BQWM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFHRCxzREFBc0Q7SUFFdEQsSUFBSTtRQUNBLE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JDLENBQUM7SUFHRCx1REFBdUQ7SUFFdkQsS0FBSztRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELHVEQUF1RDtJQUV2RCxPQUFPLENBQUMsSUFBTztRQUVYLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7UUFDbEUsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBR0QsdUZBQXVGO0lBRXZGLE9BQU87UUFFSCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQ2xFLENBQUM7UUFFRCxNQUFNLElBQUksR0FBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUViLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FFSjtBQTdERCxzQkE2REMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9EUy1Qcm9qZWN0Mi8uL3NyYy9EYXRhU3RydWN0dXJlcy9RdWV1ZS50cz80YTJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBJbXBsZW1lbnRhY2nDs24gZXN0cnVjdHVyYSAnUXVldWUnXHJcbiAqIE1lZGlhbnRlIGNsYXNlICdRdWV1ZSdcclxuICogQGF1dGhvciBkYWxvcGV6Z3VcclxuICovXHJcbmV4cG9ydCBjbGFzcyBRdWV1ZTxUPiB7XHJcbiAgICBwcml2YXRlIGxlbmd0aDogbnVtYmVyXHJcbiAgICBwcml2YXRlIGNvdW50OiBudW1iZXJcclxuICAgIHByaXZhdGUgdG9wOiBudW1iZXJcclxuICAgIHByaXZhdGUgcmVhcjogbnVtYmVyXHJcbiAgICBwcml2YXRlIGxpc3Q6IFRbXVxyXG5cclxuXHJcbiAgICAvKiogQGNvbnN0cnVjdG9yICovXHJcblxyXG4gICAgY29uc3RydWN0b3IobGVuZ3RoOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcclxuICAgICAgICB0aGlzLmNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnRvcCA9IDA7XHJcbiAgICAgICAgdGhpcy5yZWFyID0gMFxyXG4gICAgICAgIHRoaXMubGlzdCA9IFtdO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipAbWV0aG9kICBmdWxsIC0gTm90aWZpY2Egc2kgbGEgJ1F1ZXVlJyBlc3TDoSBsbGVuYSovXHJcblxyXG4gICAgZnVsbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3VudCA+PSB0aGlzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqQG1ldGhvZCBlbXB0eSAtIE5vdGlmaWNhIHNpIGxhICdRdWV1ZScgZXN0w6EgbGxlbmEgKi9cclxuXHJcbiAgICBlbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3VudCA8PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKkBtZXRob2QgZW5xdWV1ZSAtIEFncmVnYSB1biBlbGVtZW50byBhIGxhICdRdWV1ZScgKi9cclxuXHJcbiAgICBlbnF1ZXVlKGl0ZW06IFQpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZnVsbCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIi0tLSAgLmVucXVldWUoKSBpbnZhbGlkby4gUXVldWUgbGxlbmEgIC0tLVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGlzdFt0aGlzLnJlYXJdID0gaXRlbTtcclxuICAgICAgICB0aGlzLnJlYXIgPSAodGhpcy5yZWFyICsgMSkgJSB0aGlzLmxlbmd0aDtcclxuICAgICAgICB0aGlzLmNvdW50Kys7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKkBtZXRob2QgZGVxdWV1ZSAtIFF1aXRhIGVsZW1lbnRvIGRlIGxhICdRdWV1ZScsIHJldG9ybmFuZG8gYSBsYSB2ZXogZXN0ZSBlbGVtZW50byAqL1xyXG5cclxuICAgIGRlcXVldWUoKTogVCB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVtcHR5KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiLS0tICAuZGVxdWV1ZSgpIGludmFsaWRvLiBRdWV1ZSB2YWNpYSAgLS0tXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaXRlbTogVCA9IHRoaXMubGlzdFt0aGlzLnRvcF07XHJcbiAgICAgICAgdGhpcy50b3AgPSAodGhpcy50b3AgKyAxKSAlIHRoaXMubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuY291bnQtLTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9XHJcblxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/DataStructures/Queue.ts\n");

/***/ }),

/***/ "./src/DataStructures/SinglyLinkedList.ts":
/*!************************************************!*\
  !*** ./src/DataStructures/SinglyLinkedList.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SinglyLinkedList = void 0;\n/**\n * Implementación estructura 'SinglyLinkedList'\n * Mediante clase 'Node' y 'SinglyLinkedList'\n * @author dalopezgu\n */\nclass Node {\n    /**@constructor*/\n    constructor(key) {\n        this.key = key;\n        this.next = null;\n    }\n}\nclass SinglyLinkedList {\n    /**@constructor*/\n    constructor() {\n        this.head = null;\n        this.tail = null;\n    }\n    /**@method pushFront - Agrega un Nodo con un valor al inicio de la lista */\n    pushFront(key) {\n        let node = new Node(key);\n        node.next = this.head;\n        this.head = node;\n        if (this.tail == null) {\n            this.tail = node;\n        }\n    }\n    /**@method topFront - Retorna el valor del Nodo al inicio de la Lista */\n    topFront() {\n        var _a, _b;\n        if (((_a = this.head) === null || _a === void 0 ? void 0 : _a.key) == null) {\n            return null;\n        }\n        else {\n            return (_b = this.head) === null || _b === void 0 ? void 0 : _b.key;\n        }\n    }\n    /**@method popFront - Elimina un Nodo al inicio de la lista */\n    popFront() {\n        if (this.head == null) {\n            throw new Error(\"---  .popFront() invalido. Lista vacia  ---\");\n        }\n        else {\n            this.head = this.head.next;\n        }\n    }\n    /**@method pushBack - Agrega un Nodo con un valor al final de la lista */\n    pushBack(key) {\n        let node = new Node(key);\n        if (this.tail == null) {\n            this.head = node;\n            this.tail = node;\n        }\n        else {\n            this.tail.next = node;\n            this.tail = node;\n        }\n    }\n    /**@method topBack - Retorna el valor del nodo al final de la lista */\n    topBack() {\n        var _a, _b;\n        if (((_a = this.tail) === null || _a === void 0 ? void 0 : _a.key) == null) {\n            return null;\n        }\n        else {\n            return (_b = this.tail) === null || _b === void 0 ? void 0 : _b.key;\n        }\n    }\n    /**@method popBack - Elimina el Nodo al final de la lista  -  En caso de no esta el Nodo lanza ERROR */\n    popBack() {\n        var _a;\n        if (this.head == null) {\n            throw new Error(\"---  .popBack() invalido. Lista vacia  ---\");\n        }\n        if (this.head == this.tail) {\n            this.head = null;\n            this.tail = null;\n        }\n        else {\n            let temp = new Node(this.head.key);\n            temp = this.head;\n            while (((_a = temp.next) === null || _a === void 0 ? void 0 : _a.next) != null) {\n                temp = temp.next;\n            }\n            temp.next = null;\n            this.tail = temp;\n        }\n    }\n    /**@method find - Retorna un booleano que verifica si un valor esta en algún nodo de la lista */\n    find(key) {\n        var _a;\n        if (this.head != null) {\n            let notFind = true;\n            let node = new Node((_a = this.head) === null || _a === void 0 ? void 0 : _a.key);\n            node = this.head;\n            while (notFind) {\n                if (node.key == key) {\n                    notFind = false;\n                }\n            }\n            return notFind;\n        }\n        else {\n            return false;\n        }\n    }\n    /**@method erase - Elimina el nodo cuyo valor sea ingresado  -  En caso de no ser encontrado lanza ERRROR */\n    erase(key) {\n        var _a, _b;\n        if (this.head == null) {\n            throw new Error(\"---  .erase() invalido. Lista vacia  ---\");\n        }\n        if (this.head.key == key) {\n            this.head = this.head.next;\n            if (this.head == null) {\n                this.tail = null;\n            }\n        }\n        else {\n            let node = new Node(this.head.key);\n            node = this.head;\n            while (((_a = node.next) === null || _a === void 0 ? void 0 : _a.key) != key && node != this.tail) {\n                if (node.next != null) {\n                    node = node.next;\n                }\n            }\n            if (node != this.tail) {\n                node.next = (_b = node.next) === null || _b === void 0 ? void 0 : _b.next;\n                if (node.next == null) {\n                    this.tail = node;\n                }\n            }\n            else {\n                throw new Error(\"---  .erase() invalido. Elemento no encontrado  ---\");\n            }\n        }\n    }\n    /**@method empty - Retorna un booleano verificando si la lista está vacia */\n    empty() {\n        return this.head == null;\n    }\n    /**@method addBefore - Agrega un valor antes de un item ingresado  -  En caso de no esncontrar el item o que la lista esté vaicia lanza ERROR */\n    addBefore(node, key) {\n        if (this.head == null) {\n            throw new Error(\"---  .addBefore() invalido. Lista vacia  ---\");\n        }\n        let refNode = new Node(this.head.key);\n        let newNode = new Node(key);\n        if (this.head == node) {\n            newNode.next = this.head.next;\n            this.head = newNode;\n        }\n        else {\n            refNode = this.head;\n            while (refNode.next != node && refNode != this.tail) {\n                if (refNode.next != null) {\n                    refNode = refNode.next;\n                }\n            }\n            if (refNode != this.tail) {\n                newNode.next = refNode.next;\n                refNode.next = newNode;\n            }\n            else {\n                throw new Error(\"---  .addBefore() invalido. Nodo no encontrado  ---\");\n            }\n        }\n    }\n    /**@method addAfter - Agrega un valor después de un item ingresado  -  En caso de no esncontrar el item o que la lista esté vaicia lanza ERROR */\n    addAfter(node, key) {\n        if (this.head == null) {\n            throw new Error(\"---  .addAfter() invalido. Lista vacia  ---\");\n        }\n        let newNode = new Node(key);\n        if (this.find(node.key)) {\n            newNode.next = node.next;\n            node.next = newNode;\n            if (this.tail == node) {\n                this.tail = node;\n            }\n        }\n        else {\n            throw new Error(\"---  .addAfter() invalido. Nodo no encontrado  ---\");\n        }\n    }\n}\nexports.SinglyLinkedList = SinglyLinkedList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/DataStructures/SinglyLinkedList.ts\n");

/***/ }),

/***/ "./src/DataStructures/Stack.ts":
/*!*************************************!*\
  !*** ./src/DataStructures/Stack.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Stack = void 0;\n/**\n * Implementación estructura 'Stack'\n * Mediante clase 'Stack'\n * @author dalopezgu\n */\nclass Stack {\n    /**@constructor */\n    constructor(length) {\n        this.length = length;\n        this.top = 0;\n        this.list = [];\n    }\n    /**@method empty - Notifica si la 'Stack' está vacia */\n    empty() {\n        return this.top == 0;\n    }\n    /**\n    * @method topElement - Retorna el elemento en la cima de la pila\n    * @author jusantacruzc\n    **/\n    topElement() {\n        if (this.empty()) {\n            return null;\n        }\n        return this.list[this.top - 1];\n    }\n    /**\n    * @method getTop - Retorna top\n    * @author jusantacruzc\n    **/\n    getTop() {\n        if (this.empty()) {\n            return null;\n        }\n        return this.top;\n    }\n    /**@method  full - Notifica si la 'Stack' está llena */\n    full() {\n        return this.top >= this.length;\n    }\n    /**@method pop - Quita elemento de la 'Stack' */\n    pop() {\n        if (this.empty()) {\n            throw new Error(\"---  .pop() invalido. Stack vacia  ---\");\n        }\n        this.top--;\n        return this.list[this.top];\n    }\n    /**@method push - Agrega elemento a la 'Stack' */\n    push(item) {\n        if (this.full()) {\n            throw new Error(\"---  .push() invalido. Stack llena  ---\");\n        }\n        this.list[this.top] = item;\n        this.top++;\n    }\n    /**@method last - Retorna el ultimo item de la 'Stack' */\n    last() {\n        return this.list[this.top - 1];\n    }\n}\nexports.Stack = Stack;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRGF0YVN0cnVjdHVyZXMvU3RhY2sudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7R0FJRztBQUNILE1BQWEsS0FBSztJQU1kLGtCQUFrQjtJQUVsQixZQUFZLE1BQWM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBR0QsdURBQXVEO0lBRXZELEtBQUs7UUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxVQUFVO1FBQ04sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUNmLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTTtRQUNGLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDZixPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3BCLENBQUM7SUFHRCx1REFBdUQ7SUFFdkQsSUFBSTtRQUNBLE9BQU8sSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ25DLENBQUM7SUFHRCxnREFBZ0Q7SUFFaEQsR0FBRztRQUVDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDO1FBQzdELENBQUM7UUFFRCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFHRCxpREFBaUQ7SUFFakQsSUFBSSxDQUFDLElBQU87UUFFUixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELHlEQUF5RDtJQUV6RCxJQUFJO1FBQ0EsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztDQUVKO0FBbEZELHNCQWtGQyIsInNvdXJjZXMiOlsid2VicGFjazovL0RTLVByb2plY3QyLy4vc3JjL0RhdGFTdHJ1Y3R1cmVzL1N0YWNrLnRzP2UyNDIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEltcGxlbWVudGFjacOzbiBlc3RydWN0dXJhICdTdGFjaydcclxuICogTWVkaWFudGUgY2xhc2UgJ1N0YWNrJ1xyXG4gKiBAYXV0aG9yIGRhbG9wZXpndVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0YWNrPFQ+IHtcclxuICAgIHByaXZhdGUgdG9wOiBudW1iZXJcclxuICAgIHByaXZhdGUgbGVuZ3RoOiBudW1iZXJcclxuICAgIHByaXZhdGUgbGlzdDogVFtdXHJcblxyXG5cclxuICAgIC8qKkBjb25zdHJ1Y3RvciAqL1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxlbmd0aDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XHJcbiAgICAgICAgdGhpcy50b3AgPSAwO1xyXG4gICAgICAgIHRoaXMubGlzdCA9IFtdO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipAbWV0aG9kIGVtcHR5IC0gTm90aWZpY2Egc2kgbGEgJ1N0YWNrJyBlc3TDoSB2YWNpYSAqL1xyXG5cclxuICAgIGVtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvcCA9PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAbWV0aG9kIHRvcEVsZW1lbnQgLSBSZXRvcm5hIGVsIGVsZW1lbnRvIGVuIGxhIGNpbWEgZGUgbGEgcGlsYSBcclxuICAgICogQGF1dGhvciBqdXNhbnRhY3J1emNcclxuICAgICoqL1xyXG4gICAgdG9wRWxlbWVudCgpOiBUIHwgbnVsbCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdFt0aGlzLnRvcCAtIDFdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAbWV0aG9kIGdldFRvcCAtIFJldG9ybmEgdG9wXHJcbiAgICAqIEBhdXRob3IganVzYW50YWNydXpjXHJcbiAgICAqKi9cclxuICAgIGdldFRvcCgpOiBudW1iZXIgfCBudWxsIHtcclxuICAgICAgICBpZiAodGhpcy5lbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy50b3A7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKkBtZXRob2QgIGZ1bGwgLSBOb3RpZmljYSBzaSBsYSAnU3RhY2snIGVzdMOhIGxsZW5hICovXHJcblxyXG4gICAgZnVsbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b3AgPj0gdGhpcy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKkBtZXRob2QgcG9wIC0gUXVpdGEgZWxlbWVudG8gZGUgbGEgJ1N0YWNrJyAqL1xyXG5cclxuICAgIHBvcCgpOiBUIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZW1wdHkoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCItLS0gIC5wb3AoKSBpbnZhbGlkby4gU3RhY2sgdmFjaWEgIC0tLVwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50b3AtLTtcclxuICAgICAgICByZXR1cm4gdGhpcy5saXN0W3RoaXMudG9wXTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqQG1ldGhvZCBwdXNoIC0gQWdyZWdhIGVsZW1lbnRvIGEgbGEgJ1N0YWNrJyAqL1xyXG5cclxuICAgIHB1c2goaXRlbTogVCk6IHZvaWQge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5mdWxsKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiLS0tICAucHVzaCgpIGludmFsaWRvLiBTdGFjayBsbGVuYSAgLS0tXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5saXN0W3RoaXMudG9wXSA9IGl0ZW07XHJcbiAgICAgICAgdGhpcy50b3ArKztcclxuICAgIH1cclxuXHJcbiAgICAvKipAbWV0aG9kIGxhc3QgLSBSZXRvcm5hIGVsIHVsdGltbyBpdGVtIGRlIGxhICdTdGFjaycgKi9cclxuXHJcbiAgICBsYXN0KCk6IFQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RbdGhpcy50b3AgLSAxXTtcclxuICAgIH1cclxuXHJcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/DataStructures/Stack.ts\n");

/***/ }),

/***/ "./src/DataStructures/_Index.ts":
/*!**************************************!*\
  !*** ./src/DataStructures/_Index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Este módulo exporta las clases `Queue`, `SinglyLinkedList`, `Stack` y\n * `DoublyLinkedList`.\n * @module DataStructures\n * @see {@link Queue}\n * @see {@link SinglyLinkedList}\n * @see {@link Stack}\n * @see {@link DoublyLinkedList}\n * @author Jusantacruzc\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DoublyLinkedList = exports.Stack = exports.SinglyLinkedList = exports.Queue = void 0;\nconst DoublyLinkedList_1 = __webpack_require__(/*! ./DoublyLinkedList */ \"./src/DataStructures/DoublyLinkedList.ts\");\nObject.defineProperty(exports, \"DoublyLinkedList\", ({ enumerable: true, get: function () { return DoublyLinkedList_1.DoublyLinkedList; } }));\nconst Queue_1 = __webpack_require__(/*! ./Queue */ \"./src/DataStructures/Queue.ts\");\nObject.defineProperty(exports, \"Queue\", ({ enumerable: true, get: function () { return Queue_1.Queue; } }));\nconst SinglyLinkedList_1 = __webpack_require__(/*! ./SinglyLinkedList */ \"./src/DataStructures/SinglyLinkedList.ts\");\nObject.defineProperty(exports, \"SinglyLinkedList\", ({ enumerable: true, get: function () { return SinglyLinkedList_1.SinglyLinkedList; } }));\nconst Stack_1 = __webpack_require__(/*! ./Stack */ \"./src/DataStructures/Stack.ts\");\nObject.defineProperty(exports, \"Stack\", ({ enumerable: true, get: function () { return Stack_1.Stack; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvRGF0YVN0cnVjdHVyZXMvX0luZGV4LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7O0dBU0c7OztBQUVILHFIQUFzRDtBQUlkLGtHQUovQixtQ0FBZ0IsUUFJK0I7QUFIeEQsb0ZBQWdDO0FBR3hCLHVGQUhDLGFBQUssUUFHRDtBQUZiLHFIQUFzRDtBQUV2QyxrR0FGTixtQ0FBZ0IsUUFFTTtBQUQvQixvRkFBZ0M7QUFDQyx1RkFEeEIsYUFBSyxRQUN3QiIsInNvdXJjZXMiOlsid2VicGFjazovL0RTLVByb2plY3QyLy4vc3JjL0RhdGFTdHJ1Y3R1cmVzL19JbmRleC50cz8wN2NmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBFc3RlIG3Ds2R1bG8gZXhwb3J0YSBsYXMgY2xhc2VzIGBRdWV1ZWAsIGBTaW5nbHlMaW5rZWRMaXN0YCwgYFN0YWNrYCB5IFxyXG4gKiBgRG91Ymx5TGlua2VkTGlzdGAuXHJcbiAqIEBtb2R1bGUgRGF0YVN0cnVjdHVyZXNcclxuICogQHNlZSB7QGxpbmsgUXVldWV9XHJcbiAqIEBzZWUge0BsaW5rIFNpbmdseUxpbmtlZExpc3R9XHJcbiAqIEBzZWUge0BsaW5rIFN0YWNrfVxyXG4gKiBAc2VlIHtAbGluayBEb3VibHlMaW5rZWRMaXN0fVxyXG4gKiBAYXV0aG9yIEp1c2FudGFjcnV6Y1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IERvdWJseUxpbmtlZExpc3QgfSBmcm9tIFwiLi9Eb3VibHlMaW5rZWRMaXN0XCI7XHJcbmltcG9ydCB7IFF1ZXVlIH0gZnJvbSBcIi4vUXVldWVcIjtcclxuaW1wb3J0IHsgU2luZ2x5TGlua2VkTGlzdCB9IGZyb20gXCIuL1NpbmdseUxpbmtlZExpc3RcIjtcclxuaW1wb3J0IHsgU3RhY2sgfSBmcm9tIFwiLi9TdGFja1wiO1xyXG5leHBvcnQge1F1ZXVlLCBTaW5nbHlMaW5rZWRMaXN0LCBTdGFjaywgRG91Ymx5TGlua2VkTGlzdH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/DataStructures/_Index.ts\n");

/***/ }),

/***/ "./src/data/data.ts":
/*!**************************!*\
  !*** ./src/data/data.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* @author Jusantacruzc */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.libros = void 0;\n/**\n * @type {Libro[]}\n * Array que contiene una lista de libros.\n */\nexports.libros = [{ \"isbn\": \"818869523-8\", \"title\": \"Cat Chaser\", \"category\": \"Nonfiction\", \"author\": \"Royal Sculpher\", \"score\": 3.8, \"reviews\": [] },\n    { \"isbn\": \"332381082-1\", \"title\": \"First Man, The (Le Premier Homme)\", \"category\": \"Thriller\", \"author\": \"Elnar Chessor\", \"score\": 2.3, \"reviews\": [\"Awful\", \"Best i have ever read\", \"Not too bad\"] },\n    { \"isbn\": \"638523060-0\", \"title\": \"Elvis on Tour\", \"category\": \"Nonfiction\", \"author\": \"Chandal McCumskay\", \"score\": 3.5, \"reviews\": [\"I actually regret\"] },\n    { \"isbn\": \"329453625-9\", \"title\": \"Children of Hiroshima (Gembaku no ko)\", \"category\": \"Thriller\", \"author\": \"Mill Houseman\", \"score\": 1.9, \"reviews\": [\"A good one!\", \"Not too bad\", \"Awful\"] },\n    { \"isbn\": \"260356763-2\", \"title\": \"Tenacious D in The Pick of Destiny\", \"category\": \"Horror\", \"author\": \"Orelle Jansens\", \"score\": 1.6, \"reviews\": [] },\n    { \"isbn\": \"623120441-3\", \"title\": \"Just Sex and Nothing Else (Csak szex és más semmi)\", \"category\": \"Fantasy\", \"author\": \"Tracy Durran\", \"score\": 2.6, \"reviews\": [\"Interesting!\", \"Not too bad\"] },\n    { \"isbn\": \"391156786-3\", \"title\": \"Fingersmith\", \"category\": \"Horror\", \"author\": \"Essie Snoding\", \"score\": 2.4, \"reviews\": [\"I actually regret\", \"Not too bad\"] },\n    { \"isbn\": \"893245020-X\", \"title\": \"The Halloween That Almost Wasn't\", \"category\": \"Fiction\", \"author\": \"Dix Clavey\", \"score\": 1.6, \"reviews\": [\"A good one!\", \"Not too bad\"] },\n    { \"isbn\": \"530484497-1\", \"title\": \"Bernard and Doris\", \"category\": \"Fiction\", \"author\": \"Ammamaria Relph\", \"score\": 2.1, \"reviews\": [\"I actually regret\", \"A good one!\"] },\n    { \"isbn\": \"202676521-9\", \"title\": \"Talaash\", \"category\": \"Horror\", \"author\": \"Reta Hobell\", \"score\": 2.4, \"reviews\": [\"Interesting!\", \"Best i have ever read\"] },\n    { \"isbn\": \"443125683-0\", \"title\": \"Ballet Shoes\", \"category\": \"Fiction\", \"author\": \"Dun Brisbane\", \"score\": 2.9, \"reviews\": [] },\n    { \"isbn\": \"998292028-6\", \"title\": \"Blood into Wine\", \"category\": \"Fantasy\", \"author\": \"Meta Sobtka\", \"score\": 1.6, \"reviews\": [] },\n    { \"isbn\": \"659818711-7\", \"title\": \"Specials, The\", \"category\": \"Fiction\", \"author\": \"Sibylla Couroy\", \"score\": 5.0, \"reviews\": [\"Interesting!\", \"Best i have ever read\", \"A good one!\"] },\n    { \"isbn\": \"727364362-9\", \"title\": \"Missile to the Moon\", \"category\": \"Thriller\", \"author\": \"Payton Cowdery\", \"score\": 1.5, \"reviews\": [] },\n    { \"isbn\": \"902425335-7\", \"title\": \"Whatever Works\", \"category\": \"Fiction\", \"author\": \"Andie Knightsbridge\", \"score\": 2.8, \"reviews\": [\"Awful\", \"I actually regret\"] },\n    { \"isbn\": \"775620032-2\", \"title\": \"Men Seeking Women\", \"category\": \"Thriller\", \"author\": \"Morley Foxten\", \"score\": 4.1, \"reviews\": [\"Best i have ever read\"] },\n    { \"isbn\": \"202328458-9\", \"title\": \"White Palms (Fehér tenyér)\", \"category\": \"Fiction\", \"author\": \"Vidovik Manz\", \"score\": 1.1, \"reviews\": [\"I actually regret\"] },\n    { \"isbn\": \"646120913-1\", \"title\": \"Alvarez Kelly\", \"category\": \"Fantasy\", \"author\": \"Joela Hobble\", \"score\": 4.7, \"reviews\": [\"Awful\", \"Best i have ever read\", \"Not too bad\"] },\n    { \"isbn\": \"001904973-0\", \"title\": \"North Beach\", \"category\": \"Fantasy\", \"author\": \"Otto Gariff\", \"score\": 2.1, \"reviews\": [\"Awful\"] },\n    { \"isbn\": \"292863317-0\", \"title\": \"Roaring Twenties, The\", \"category\": \"Thriller\", \"author\": \"Isidro Goodwyn\", \"score\": 1.0, \"reviews\": [] },\n    { \"isbn\": \"793669483-8\", \"title\": \"Mother and Child\", \"category\": \"Fiction\", \"author\": \"Bernita Goning\", \"score\": 4.2, \"reviews\": [\"Awful\", \"A good one!\", \"I actually regret\"] },\n    { \"isbn\": \"480174457-5\", \"title\": \"Love and Honor\", \"category\": \"Thriller\", \"author\": \"Ricky Duthie\", \"score\": 2.6, \"reviews\": [\"I actually regret\"] },\n    { \"isbn\": \"905812836-9\", \"title\": \"Farmer's Wife, The\", \"category\": \"Fiction\", \"author\": \"Annmarie Glennie\", \"score\": 1.5, \"reviews\": [\"Awful\"] },\n    { \"isbn\": \"458888089-6\", \"title\": \"Doctor Dolittle\", \"category\": \"Nonfiction\", \"author\": \"Renato Ghest\", \"score\": 2.2, \"reviews\": [\"I actually regret\", \"Not too bad\"] },\n    { \"isbn\": \"036905730-9\", \"title\": \"He Who Dares\", \"category\": \"Fantasy\", \"author\": \"Irma Lofts\", \"score\": 4.1, \"reviews\": [] },\n    { \"isbn\": \"853649658-4\", \"title\": \"Breakfast of Champions\", \"category\": \"Thriller\", \"author\": \"Chlo Franchi\", \"score\": 4.1, \"reviews\": [\"Best i have ever read\", \"Interesting!\", \"Not too bad\"] },\n    { \"isbn\": \"056553716-4\", \"title\": \"Disorderlies\", \"category\": \"Nonfiction\", \"author\": \"Bud Stebbings\", \"score\": 4.7, \"reviews\": [] },\n    { \"isbn\": \"851221754-5\", \"title\": \"Captain Ron\", \"category\": \"Thriller\", \"author\": \"Mechelle Mochar\", \"score\": 4.5, \"reviews\": [] },\n    { \"isbn\": \"186467142-4\", \"title\": \"Guilty by Suspicion\", \"category\": \"Fantasy\", \"author\": \"Rochelle Goly\", \"score\": 3.0, \"reviews\": [] },\n    { \"isbn\": \"717094480-4\", \"title\": \"The Spectacular Now\", \"category\": \"Nonfiction\", \"author\": \"Karl Quarless\", \"score\": 1.6, \"reviews\": [] },\n    { \"isbn\": \"830508736-0\", \"title\": \"Debtocracy\", \"category\": \"Thriller\", \"author\": \"Eberhard Sarre\", \"score\": 2.9, \"reviews\": [\"I actually regret\", \"Not too bad\"] },\n    { \"isbn\": \"491782523-7\", \"title\": \"Ali G Indahouse\", \"category\": \"Fantasy\", \"author\": \"Mariana Tenney\", \"score\": 1.8, \"reviews\": [\"I actually regret\"] },\n    { \"isbn\": \"408356957-3\", \"title\": \"First Power, The\", \"category\": \"Fantasy\", \"author\": \"Adore Guard\", \"score\": 2.3, \"reviews\": [\"Not too bad\", \"A good one!\"] },\n    { \"isbn\": \"350525937-3\", \"title\": \"London - The Modern Babylon \", \"category\": \"Fiction\", \"author\": \"Darleen McChruiter\", \"score\": 4.1, \"reviews\": [\"A good one!\", \"Best i have ever read\"] },\n    { \"isbn\": \"595977367-8\", \"title\": \"Undercover Blues\", \"category\": \"Fantasy\", \"author\": \"Wylma Dowthwaite\", \"score\": 5.0, \"reviews\": [\"Interesting!\", \"I actually regret\"] },\n    { \"isbn\": \"320623358-5\", \"title\": \"The Secret of Dr. Kildare\", \"category\": \"Thriller\", \"author\": \"Wendeline Derricoat\", \"score\": 1.5, \"reviews\": [\"A good one!\"] },\n    { \"isbn\": \"896087068-4\", \"title\": \"Suspect\", \"category\": \"Fiction\", \"author\": \"Marcela Hargroves\", \"score\": 2.8, \"reviews\": [\"I actually regret\", \"A good one!\"] },\n    { \"isbn\": \"503494790-0\", \"title\": \"Dean Spanley\", \"category\": \"Horror\", \"author\": \"Gar Futty\", \"score\": 3.8, \"reviews\": [\"Awful\", \"Best i have ever read\"] },\n    { \"isbn\": \"923749366-5\", \"title\": \"No Looking Back\", \"category\": \"Horror\", \"author\": \"Madelyn Marchington\", \"score\": 4.2, \"reviews\": [\"Interesting!\", \"I actually regret\", \"Best i have ever read\"] },\n    { \"isbn\": \"862967339-7\", \"title\": \"Life of a King\", \"category\": \"Fiction\", \"author\": \"Rikki Tweede\", \"score\": 3.5, \"reviews\": [] },\n    { \"isbn\": \"702098547-5\", \"title\": \"Super Demetrios\", \"category\": \"Fiction\", \"author\": \"Giffie Ruppertz\", \"score\": 4.4, \"reviews\": [\"Best i have ever read\"] },\n    { \"isbn\": \"837716307-1\", \"title\": \"Paris Blues\", \"category\": \"Thriller\", \"author\": \"Daryl Methingam\", \"score\": 4.0, \"reviews\": [\"Not too bad\", \"A good one!\", \"Awful\"] },\n    { \"isbn\": \"386898924-2\", \"title\": \"Black Bread (Pa Negre)\", \"category\": \"Fantasy\", \"author\": \"Catherin Ginnally\", \"score\": 4.6, \"reviews\": [\"I actually regret\"] },\n    { \"isbn\": \"826322984-7\", \"title\": \"Antique (Sayangkoldong yangkwajajeom aentikeu)\", \"category\": \"Thriller\", \"author\": \"Rabbi Leggen\", \"score\": 1.1, \"reviews\": [] },\n    { \"isbn\": \"898854518-4\", \"title\": \"Bill Burr: You People Are All the Same\", \"category\": \"Thriller\", \"author\": \"Perl Sturman\", \"score\": 3.9, \"reviews\": [] },\n    { \"isbn\": \"499479407-3\", \"title\": \"Day of the Animals\", \"category\": \"Fantasy\", \"author\": \"Annamaria Tomaino\", \"score\": 4.7, \"reviews\": [\"Awful\", \"A good one!\", \"I actually regret\"] },\n    { \"isbn\": \"036989401-4\", \"title\": \"Peaceful Warrior\", \"category\": \"Fiction\", \"author\": \"Judith Westmarland\", \"score\": 2.8, \"reviews\": [\"A good one!\"] },\n    { \"isbn\": \"539903781-5\", \"title\": \"Dangerous Ground\", \"category\": \"Nonfiction\", \"author\": \"Moyna Jaskowicz\", \"score\": 4.5, \"reviews\": [\"Not too bad\", \"I actually regret\", \"Best i have ever read\"] },\n    { \"isbn\": \"888513640-0\", \"title\": \"Triumph of the Nerds, The: The Rise of Accidental Empires\", \"category\": \"Nonfiction\", \"author\": \"Zebedee Balma\", \"score\": 2.1, \"reviews\": [\"I actually regret\", \"Not too bad\", \"Interesting!\"] },\n    { \"isbn\": \"088827049-6\", \"title\": \"Three Faces of Eve, The\", \"category\": \"Fantasy\", \"author\": \"Bianka Lee\", \"score\": 3.6, \"reviews\": [] },\n    { \"isbn\": \"099412087-7\", \"title\": \"Tears of April (Käsky)\", \"category\": \"Thriller\", \"author\": \"Andonis Sabbin\", \"score\": 3.6, \"reviews\": [\"Not too bad\", \"Best i have ever read\"] },\n    { \"isbn\": \"035679981-6\", \"title\": \"To Cross the Rubicon\", \"category\": \"Thriller\", \"author\": \"Kurt Permain\", \"score\": 3.4, \"reviews\": [\"Interesting!\"] },\n    { \"isbn\": \"849509957-8\", \"title\": \"May Fools (Milou en mai)\", \"category\": \"Nonfiction\", \"author\": \"Mei Girling\", \"score\": 1.7, \"reviews\": [] },\n    { \"isbn\": \"647227463-0\", \"title\": \"How Bruce Lee Changed the World\", \"category\": \"Thriller\", \"author\": \"Katrina Wass\", \"score\": 3.9, \"reviews\": [\"A good one!\"] },\n    { \"isbn\": \"527056114-X\", \"title\": \"Zift\", \"category\": \"Fantasy\", \"author\": \"Goldi Vescovo\", \"score\": 1.9, \"reviews\": [] },\n    { \"isbn\": \"836959229-5\", \"title\": \"Keane\", \"category\": \"Nonfiction\", \"author\": \"Estevan Hearmon\", \"score\": 3.2, \"reviews\": [] },\n    { \"isbn\": \"178474068-3\", \"title\": \"Kull the Conqueror\", \"category\": \"Nonfiction\", \"author\": \"Zacherie Warsop\", \"score\": 4.0, \"reviews\": [\"Best i have ever read\", \"I actually regret\", \"A good one!\"] },\n    { \"isbn\": \"329785898-2\", \"title\": \"Two Lives (Zwei Leben)\", \"category\": \"Thriller\", \"author\": \"Delmar Raiment\", \"score\": 3.0, \"reviews\": [\"I actually regret\", \"Awful\"] },\n    { \"isbn\": \"100190424-9\", \"title\": \"Wrong Turn 3: Left for Dead\", \"category\": \"Fiction\", \"author\": \"Delinda Pinks\", \"score\": 5.0, \"reviews\": [\"Awful\", \"Best i have ever read\", \"I actually regret\"] },\n    { \"isbn\": \"973229509-0\", \"title\": \"Devil to Pay!, The\", \"category\": \"Fantasy\", \"author\": \"Casie Please\", \"score\": 2.1, \"reviews\": [\"Awful\", \"Not too bad\", \"Best i have ever read\"] },\n    { \"isbn\": \"432865275-3\", \"title\": \"London Conspiracy\", \"category\": \"Thriller\", \"author\": \"Hagan Dankersley\", \"score\": 1.9, \"reviews\": [\"Awful\"] },\n    { \"isbn\": \"635356192-X\", \"title\": \"Apache Territory \", \"category\": \"Thriller\", \"author\": \"Mitzi Gallemore\", \"score\": 3.3, \"reviews\": [\"A good one!\", \"Awful\", \"Best i have ever read\"] },\n    { \"isbn\": \"088984541-7\", \"title\": \"Diary of a Wimpy Kid: Rodrick Rules\", \"category\": \"Nonfiction\", \"author\": \"Vivien Handrek\", \"score\": 2.1, \"reviews\": [\"Awful\", \"Best i have ever read\", \"Not too bad\"] },\n    { \"isbn\": \"548171252-0\", \"title\": \"Camp\", \"category\": \"Thriller\", \"author\": \"Claudia Clemmitt\", \"score\": 4.2, \"reviews\": [] },\n    { \"isbn\": \"602900123-X\", \"title\": \"Company, The\", \"category\": \"Nonfiction\", \"author\": \"Marieann Dubble\", \"score\": 2.0, \"reviews\": [\"Awful\", \"Not too bad\", \"A good one!\"] },\n    { \"isbn\": \"062448930-2\", \"title\": \"Appointment in Tokyo\", \"category\": \"Fiction\", \"author\": \"Roz Linkleter\", \"score\": 4.4, \"reviews\": [\"I actually regret\", \"Interesting!\", \"Awful\"] },\n    { \"isbn\": \"836890705-5\", \"title\": \"Midnight Chronicles\", \"category\": \"Nonfiction\", \"author\": \"Samson Studd\", \"score\": 2.4, \"reviews\": [\"Best i have ever read\", \"Awful\", \"Interesting!\"] },\n    { \"isbn\": \"250218224-7\", \"title\": \"Misérables, Les\", \"category\": \"Horror\", \"author\": \"Anya Risborough\", \"score\": 1.2, \"reviews\": [\"Awful\", \"Interesting!\"] },\n    { \"isbn\": \"242906656-4\", \"title\": \"Riding in Cars with Boys\", \"category\": \"Fiction\", \"author\": \"Maudie Di Bartolomeo\", \"score\": 3.0, \"reviews\": [\"Interesting!\", \"Best i have ever read\", \"A good one!\"] },\n    { \"isbn\": \"568141230-X\", \"title\": \"Judith of Bethulia\", \"category\": \"Fiction\", \"author\": \"Madelaine Pashenkov\", \"score\": 1.2, \"reviews\": [\"Best i have ever read\", \"A good one!\"] },\n    { \"isbn\": \"354324051-X\", \"title\": \"Rings\", \"category\": \"Fiction\", \"author\": \"Rosalind Varnals\", \"score\": 3.6, \"reviews\": [\"I actually regret\"] },\n    { \"isbn\": \"538169353-2\", \"title\": \"Violent Saturday\", \"category\": \"Horror\", \"author\": \"Zacherie Di Pietro\", \"score\": 1.5, \"reviews\": [] },\n    { \"isbn\": \"374686963-3\", \"title\": \"Ghost Ship, The\", \"category\": \"Horror\", \"author\": \"Bron Burles\", \"score\": 4.4, \"reviews\": [\"I actually regret\", \"Not too bad\"] },\n    { \"isbn\": \"527869781-4\", \"title\": \"Paul Blart: Mall Cop\", \"category\": \"Fiction\", \"author\": \"Alwin O'Tierney\", \"score\": 2.6, \"reviews\": [] },\n    { \"isbn\": \"017898309-8\", \"title\": \"Leprechaun 2\", \"category\": \"Fiction\", \"author\": \"Law Kidstoun\", \"score\": 1.4, \"reviews\": [\"Awful\", \"I actually regret\", \"Best i have ever read\"] },\n    { \"isbn\": \"203014615-3\", \"title\": \"Art of Flight, The\", \"category\": \"Nonfiction\", \"author\": \"Bryna Escreet\", \"score\": 3.4, \"reviews\": [\"A good one!\", \"Best i have ever read\"] },\n    { \"isbn\": \"943514418-7\", \"title\": \"Tale of Tales (Skazka skazok)\", \"category\": \"Fiction\", \"author\": \"Hayley Colegate\", \"score\": 4.6, \"reviews\": [\"Not too bad\", \"Best i have ever read\", \"Interesting!\"] },\n    { \"isbn\": \"329738399-2\", \"title\": \"Flame of New Orleans, The\", \"category\": \"Thriller\", \"author\": \"Jacquenette Bedbrough\", \"score\": 2.5, \"reviews\": [] },\n    { \"isbn\": \"775860608-3\", \"title\": \"Keep Walking (Camminacammina)\", \"category\": \"Nonfiction\", \"author\": \"Shena Vazquez\", \"score\": 4.3, \"reviews\": [\"I actually regret\"] },\n    { \"isbn\": \"807743625-0\", \"title\": \"Tales from the Darkside: The Movie\", \"category\": \"Horror\", \"author\": \"Grover Keuning\", \"score\": 1.3, \"reviews\": [\"Interesting!\", \"Awful\"] },\n    { \"isbn\": \"042724035-2\", \"title\": \"Nick Carter, Master Detective\", \"category\": \"Horror\", \"author\": \"Raoul Clevely\", \"score\": 3.0, \"reviews\": [\"Not too bad\", \"Best i have ever read\"] },\n    { \"isbn\": \"963256790-0\", \"title\": \"Angels & Demons\", \"category\": \"Fiction\", \"author\": \"Benetta Sandbatch\", \"score\": 3.1, \"reviews\": [\"Best i have ever read\", \"Interesting!\", \"A good one!\"] },\n    { \"isbn\": \"163450702-9\", \"title\": \"Shadow Riders, The\", \"category\": \"Fiction\", \"author\": \"Manya Tregian\", \"score\": 1.2, \"reviews\": [\"Interesting!\", \"A good one!\", \"Awful\"] },\n    { \"isbn\": \"689300409-5\", \"title\": \"Ruby Gentry\", \"category\": \"Nonfiction\", \"author\": \"Wandie Vibert\", \"score\": 3.9, \"reviews\": [\"Not too bad\"] },\n    { \"isbn\": \"108334608-3\", \"title\": \"Mahoney's Last Stand\", \"category\": \"Horror\", \"author\": \"Maude Cowdrey\", \"score\": 3.7, \"reviews\": [] },\n    { \"isbn\": \"665338169-2\", \"title\": \"Gappa: The Triphibian Monsters (AKA Monster from a Prehistoric Planet) (Daikyojû Gappa)\", \"category\": \"Nonfiction\", \"author\": \"Theressa Colls\", \"score\": 4.6, \"reviews\": [\"I actually regret\"] },\n    { \"isbn\": \"408793356-3\", \"title\": \"White God (Fehér isten)\", \"category\": \"Thriller\", \"author\": \"Corry Kenner\", \"score\": 5.0, \"reviews\": [] },\n    { \"isbn\": \"216036788-5\", \"title\": \"Cutting Edge: Going for the Gold, The\", \"category\": \"Fiction\", \"author\": \"Stephana Klimkov\", \"score\": 3.2, \"reviews\": [\"Interesting!\", \"A good one!\"] },\n    { \"isbn\": \"746276577-2\", \"title\": \"If These Walls Could Talk 2\", \"category\": \"Thriller\", \"author\": \"Gisele Blaes\", \"score\": 2.2, \"reviews\": [\"Awful\", \"A good one!\"] },\n    { \"isbn\": \"252176810-3\", \"title\": \"Heaven & Earth\", \"category\": \"Fiction\", \"author\": \"Emlyn Trusdale\", \"score\": 4.6, \"reviews\": [] },\n    { \"isbn\": \"934671203-1\", \"title\": \"Loaded\", \"category\": \"Fiction\", \"author\": \"Falito Chasson\", \"score\": 4.0, \"reviews\": [] },\n    { \"isbn\": \"127491355-1\", \"title\": \"Roommate, The\", \"category\": \"Fiction\", \"author\": \"Granny Woodrow\", \"score\": 2.2, \"reviews\": [\"Best i have ever read\", \"A good one!\", \"I actually regret\"] },\n    { \"isbn\": \"267113188-7\", \"title\": \"Paradise: Faith (Paradies: Glaube)\", \"category\": \"Thriller\", \"author\": \"Hakeem Delicate\", \"score\": 4.4, \"reviews\": [\"A good one!\", \"Awful\", \"Best i have ever read\"] },\n    { \"isbn\": \"919109447-X\", \"title\": \"Book of Eli, The\", \"category\": \"Fiction\", \"author\": \"Curry Degli Antoni\", \"score\": 1.7, \"reviews\": [\"Interesting!\", \"A good one!\"] },\n    { \"isbn\": \"904052299-5\", \"title\": \"Last American Hero, The\", \"category\": \"Thriller\", \"author\": \"Emiline Kemitt\", \"score\": 4.7, \"reviews\": [] },\n    { \"isbn\": \"732960654-5\", \"title\": \"Last Ride, The\", \"category\": \"Thriller\", \"author\": \"Derick Sell\", \"score\": 3.7, \"reviews\": [\"I actually regret\"] },\n    { \"isbn\": \"022512633-8\", \"title\": \"Five Star Final\", \"category\": \"Fantasy\", \"author\": \"Cary Spiller\", \"score\": 1.2, \"reviews\": [\"Not too bad\", \"Interesting!\", \"I actually regret\"] },\n    { \"isbn\": \"247344559-1\", \"title\": \"Land That Time Forgot, The\", \"category\": \"Fiction\", \"author\": \"Madelaine Mackiewicz\", \"score\": 3.6, \"reviews\": [\"Awful\", \"Best i have ever read\", \"I actually regret\"] },\n    { \"isbn\": \"018723993-2\", \"title\": \"She's Out of Control\", \"category\": \"Horror\", \"author\": \"Gav Musk\", \"score\": 3.6, \"reviews\": [\"Interesting!\", \"Awful\", \"Not too bad\"] },\n    { \"isbn\": \"920221785-8\", \"title\": \"Katt Williams: The Pimp Chronicles Pt. 1\", \"category\": \"Fantasy\", \"author\": \"Fergus Ingry\", \"score\": 2.2, \"reviews\": [\"A good one!\"] }];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUMsbUJBQW1CLENBQUMsRUFBRTtJQUNySixFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsbUJBQW1CLENBQUMsRUFBRTtJQUNyTCxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLG1CQUFtQixDQUFDLEVBQUU7SUFDM00sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxFQUFFO0lBQ3pLLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsMENBQTBDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0RTLVByb2plY3QyLy4vc3JjL2RhdGEvZGF0YS50cz83YTU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBhdXRob3IgSnVzYW50YWNydXpjICovXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50YWNpb24gZGUgdW4gbGlicm8uXHJcbiAqIEBpbnRlcmZhY2VcclxuICovXHJcbmludGVyZmFjZSBMaWJybyB7XHJcbiAgICBpc2JuOiBzdHJpbmc7XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgY2F0ZWdvcnk6IHN0cmluZztcclxuICAgIGF1dGhvcjogc3RyaW5nO1xyXG4gICAgc2NvcmU6IG51bWJlcjtcclxuICAgIHJldmlld3M6IGFueVtdOyBcclxufVxyXG4vKipcclxuICogQHR5cGUge0xpYnJvW119XHJcbiAqIEFycmF5IHF1ZSBjb250aWVuZSB1bmEgbGlzdGEgZGUgbGlicm9zLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGxpYnJvczogTGlicm9bXSA9IFt7IFwiaXNiblwiOiBcIjgxODg2OTUyMy04XCIsIFwidGl0bGVcIjogXCJDYXQgQ2hhc2VyXCIsIFwiY2F0ZWdvcnlcIjogXCJOb25maWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiUm95YWwgU2N1bHBoZXJcIiwgXCJzY29yZVwiOiAzLjgsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjMzMjM4MTA4Mi0xXCIsIFwidGl0bGVcIjogXCJGaXJzdCBNYW4sIFRoZSAoTGUgUHJlbWllciBIb21tZSlcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiRWxuYXIgQ2hlc3NvclwiLCBcInNjb3JlXCI6IDIuMywgXCJyZXZpZXdzXCI6IFtcIkF3ZnVsXCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCIsIFwiTm90IHRvbyBiYWRcIl0gfSxcclxueyBcImlzYm5cIjogXCI2Mzg1MjMwNjAtMFwiLCBcInRpdGxlXCI6IFwiRWx2aXMgb24gVG91clwiLCBcImNhdGVnb3J5XCI6IFwiTm9uZmljdGlvblwiLCBcImF1dGhvclwiOiBcIkNoYW5kYWwgTWNDdW1za2F5XCIsIFwic2NvcmVcIjogMy41LCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIl0gfSxcclxueyBcImlzYm5cIjogXCIzMjk0NTM2MjUtOVwiLCBcInRpdGxlXCI6IFwiQ2hpbGRyZW4gb2YgSGlyb3NoaW1hIChHZW1iYWt1IG5vIGtvKVwiLCBcImNhdGVnb3J5XCI6IFwiVGhyaWxsZXJcIiwgXCJhdXRob3JcIjogXCJNaWxsIEhvdXNlbWFuXCIsIFwic2NvcmVcIjogMS45LCBcInJldmlld3NcIjogW1wiQSBnb29kIG9uZSFcIiwgXCJOb3QgdG9vIGJhZFwiLCBcIkF3ZnVsXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMjYwMzU2NzYzLTJcIiwgXCJ0aXRsZVwiOiBcIlRlbmFjaW91cyBEIGluIFRoZSBQaWNrIG9mIERlc3RpbnlcIiwgXCJjYXRlZ29yeVwiOiBcIkhvcnJvclwiLCBcImF1dGhvclwiOiBcIk9yZWxsZSBKYW5zZW5zXCIsIFwic2NvcmVcIjogMS42LCBcInJldmlld3NcIjogW10gfSxcclxueyBcImlzYm5cIjogXCI2MjMxMjA0NDEtM1wiLCBcInRpdGxlXCI6IFwiSnVzdCBTZXggYW5kIE5vdGhpbmcgRWxzZSAoQ3NhayBzemV4IMOpcyBtw6FzIHNlbW1pKVwiLCBcImNhdGVnb3J5XCI6IFwiRmFudGFzeVwiLCBcImF1dGhvclwiOiBcIlRyYWN5IER1cnJhblwiLCBcInNjb3JlXCI6IDIuNiwgXCJyZXZpZXdzXCI6IFtcIkludGVyZXN0aW5nIVwiLCBcIk5vdCB0b28gYmFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMzkxMTU2Nzg2LTNcIiwgXCJ0aXRsZVwiOiBcIkZpbmdlcnNtaXRoXCIsIFwiY2F0ZWdvcnlcIjogXCJIb3Jyb3JcIiwgXCJhdXRob3JcIjogXCJFc3NpZSBTbm9kaW5nXCIsIFwic2NvcmVcIjogMi40LCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIiwgXCJOb3QgdG9vIGJhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjg5MzI0NTAyMC1YXCIsIFwidGl0bGVcIjogXCJUaGUgSGFsbG93ZWVuIFRoYXQgQWxtb3N0IFdhc24ndFwiLCBcImNhdGVnb3J5XCI6IFwiRmljdGlvblwiLCBcImF1dGhvclwiOiBcIkRpeCBDbGF2ZXlcIiwgXCJzY29yZVwiOiAxLjYsIFwicmV2aWV3c1wiOiBbXCJBIGdvb2Qgb25lIVwiLCBcIk5vdCB0b28gYmFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNTMwNDg0NDk3LTFcIiwgXCJ0aXRsZVwiOiBcIkJlcm5hcmQgYW5kIERvcmlzXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiQW1tYW1hcmlhIFJlbHBoXCIsIFwic2NvcmVcIjogMi4xLCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIiwgXCJBIGdvb2Qgb25lIVwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjIwMjY3NjUyMS05XCIsIFwidGl0bGVcIjogXCJUYWxhYXNoXCIsIFwiY2F0ZWdvcnlcIjogXCJIb3Jyb3JcIiwgXCJhdXRob3JcIjogXCJSZXRhIEhvYmVsbFwiLCBcInNjb3JlXCI6IDIuNCwgXCJyZXZpZXdzXCI6IFtcIkludGVyZXN0aW5nIVwiLCBcIkJlc3QgaSBoYXZlIGV2ZXIgcmVhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjQ0MzEyNTY4My0wXCIsIFwidGl0bGVcIjogXCJCYWxsZXQgU2hvZXNcIiwgXCJjYXRlZ29yeVwiOiBcIkZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJEdW4gQnJpc2JhbmVcIiwgXCJzY29yZVwiOiAyLjksIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjk5ODI5MjAyOC02XCIsIFwidGl0bGVcIjogXCJCbG9vZCBpbnRvIFdpbmVcIiwgXCJjYXRlZ29yeVwiOiBcIkZhbnRhc3lcIiwgXCJhdXRob3JcIjogXCJNZXRhIFNvYnRrYVwiLCBcInNjb3JlXCI6IDEuNiwgXCJyZXZpZXdzXCI6IFtdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNjU5ODE4NzExLTdcIiwgXCJ0aXRsZVwiOiBcIlNwZWNpYWxzLCBUaGVcIiwgXCJjYXRlZ29yeVwiOiBcIkZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJTaWJ5bGxhIENvdXJveVwiLCBcInNjb3JlXCI6IDUuMCwgXCJyZXZpZXdzXCI6IFtcIkludGVyZXN0aW5nIVwiLCBcIkJlc3QgaSBoYXZlIGV2ZXIgcmVhZFwiLCBcIkEgZ29vZCBvbmUhXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNzI3MzY0MzYyLTlcIiwgXCJ0aXRsZVwiOiBcIk1pc3NpbGUgdG8gdGhlIE1vb25cIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiUGF5dG9uIENvd2RlcnlcIiwgXCJzY29yZVwiOiAxLjUsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjkwMjQyNTMzNS03XCIsIFwidGl0bGVcIjogXCJXaGF0ZXZlciBXb3Jrc1wiLCBcImNhdGVnb3J5XCI6IFwiRmljdGlvblwiLCBcImF1dGhvclwiOiBcIkFuZGllIEtuaWdodHNicmlkZ2VcIiwgXCJzY29yZVwiOiAyLjgsIFwicmV2aWV3c1wiOiBbXCJBd2Z1bFwiLCBcIkkgYWN0dWFsbHkgcmVncmV0XCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNzc1NjIwMDMyLTJcIiwgXCJ0aXRsZVwiOiBcIk1lbiBTZWVraW5nIFdvbWVuXCIsIFwiY2F0ZWdvcnlcIjogXCJUaHJpbGxlclwiLCBcImF1dGhvclwiOiBcIk1vcmxleSBGb3h0ZW5cIiwgXCJzY29yZVwiOiA0LjEsIFwicmV2aWV3c1wiOiBbXCJCZXN0IGkgaGF2ZSBldmVyIHJlYWRcIl0gfSxcclxueyBcImlzYm5cIjogXCIyMDIzMjg0NTgtOVwiLCBcInRpdGxlXCI6IFwiV2hpdGUgUGFsbXMgKEZlaMOpciB0ZW55w6lyKVwiLCBcImNhdGVnb3J5XCI6IFwiRmljdGlvblwiLCBcImF1dGhvclwiOiBcIlZpZG92aWsgTWFuelwiLCBcInNjb3JlXCI6IDEuMSwgXCJyZXZpZXdzXCI6IFtcIkkgYWN0dWFsbHkgcmVncmV0XCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNjQ2MTIwOTEzLTFcIiwgXCJ0aXRsZVwiOiBcIkFsdmFyZXogS2VsbHlcIiwgXCJjYXRlZ29yeVwiOiBcIkZhbnRhc3lcIiwgXCJhdXRob3JcIjogXCJKb2VsYSBIb2JibGVcIiwgXCJzY29yZVwiOiA0LjcsIFwicmV2aWV3c1wiOiBbXCJBd2Z1bFwiLCBcIkJlc3QgaSBoYXZlIGV2ZXIgcmVhZFwiLCBcIk5vdCB0b28gYmFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMDAxOTA0OTczLTBcIiwgXCJ0aXRsZVwiOiBcIk5vcnRoIEJlYWNoXCIsIFwiY2F0ZWdvcnlcIjogXCJGYW50YXN5XCIsIFwiYXV0aG9yXCI6IFwiT3R0byBHYXJpZmZcIiwgXCJzY29yZVwiOiAyLjEsIFwicmV2aWV3c1wiOiBbXCJBd2Z1bFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjI5Mjg2MzMxNy0wXCIsIFwidGl0bGVcIjogXCJSb2FyaW5nIFR3ZW50aWVzLCBUaGVcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiSXNpZHJvIEdvb2R3eW5cIiwgXCJzY29yZVwiOiAxLjAsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjc5MzY2OTQ4My04XCIsIFwidGl0bGVcIjogXCJNb3RoZXIgYW5kIENoaWxkXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiQmVybml0YSBHb25pbmdcIiwgXCJzY29yZVwiOiA0LjIsIFwicmV2aWV3c1wiOiBbXCJBd2Z1bFwiLCBcIkEgZ29vZCBvbmUhXCIsIFwiSSBhY3R1YWxseSByZWdyZXRcIl0gfSxcclxueyBcImlzYm5cIjogXCI0ODAxNzQ0NTctNVwiLCBcInRpdGxlXCI6IFwiTG92ZSBhbmQgSG9ub3JcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiUmlja3kgRHV0aGllXCIsIFwic2NvcmVcIjogMi42LCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIl0gfSxcclxueyBcImlzYm5cIjogXCI5MDU4MTI4MzYtOVwiLCBcInRpdGxlXCI6IFwiRmFybWVyJ3MgV2lmZSwgVGhlXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiQW5ubWFyaWUgR2xlbm5pZVwiLCBcInNjb3JlXCI6IDEuNSwgXCJyZXZpZXdzXCI6IFtcIkF3ZnVsXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNDU4ODg4MDg5LTZcIiwgXCJ0aXRsZVwiOiBcIkRvY3RvciBEb2xpdHRsZVwiLCBcImNhdGVnb3J5XCI6IFwiTm9uZmljdGlvblwiLCBcImF1dGhvclwiOiBcIlJlbmF0byBHaGVzdFwiLCBcInNjb3JlXCI6IDIuMiwgXCJyZXZpZXdzXCI6IFtcIkkgYWN0dWFsbHkgcmVncmV0XCIsIFwiTm90IHRvbyBiYWRcIl0gfSxcclxueyBcImlzYm5cIjogXCIwMzY5MDU3MzAtOVwiLCBcInRpdGxlXCI6IFwiSGUgV2hvIERhcmVzXCIsIFwiY2F0ZWdvcnlcIjogXCJGYW50YXN5XCIsIFwiYXV0aG9yXCI6IFwiSXJtYSBMb2Z0c1wiLCBcInNjb3JlXCI6IDQuMSwgXCJyZXZpZXdzXCI6IFtdIH0sXHJcbnsgXCJpc2JuXCI6IFwiODUzNjQ5NjU4LTRcIiwgXCJ0aXRsZVwiOiBcIkJyZWFrZmFzdCBvZiBDaGFtcGlvbnNcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiQ2hsbyBGcmFuY2hpXCIsIFwic2NvcmVcIjogNC4xLCBcInJldmlld3NcIjogW1wiQmVzdCBpIGhhdmUgZXZlciByZWFkXCIsIFwiSW50ZXJlc3RpbmchXCIsIFwiTm90IHRvbyBiYWRcIl0gfSxcclxueyBcImlzYm5cIjogXCIwNTY1NTM3MTYtNFwiLCBcInRpdGxlXCI6IFwiRGlzb3JkZXJsaWVzXCIsIFwiY2F0ZWdvcnlcIjogXCJOb25maWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiQnVkIFN0ZWJiaW5nc1wiLCBcInNjb3JlXCI6IDQuNywgXCJyZXZpZXdzXCI6IFtdIH0sXHJcbnsgXCJpc2JuXCI6IFwiODUxMjIxNzU0LTVcIiwgXCJ0aXRsZVwiOiBcIkNhcHRhaW4gUm9uXCIsIFwiY2F0ZWdvcnlcIjogXCJUaHJpbGxlclwiLCBcImF1dGhvclwiOiBcIk1lY2hlbGxlIE1vY2hhclwiLCBcInNjb3JlXCI6IDQuNSwgXCJyZXZpZXdzXCI6IFtdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMTg2NDY3MTQyLTRcIiwgXCJ0aXRsZVwiOiBcIkd1aWx0eSBieSBTdXNwaWNpb25cIiwgXCJjYXRlZ29yeVwiOiBcIkZhbnRhc3lcIiwgXCJhdXRob3JcIjogXCJSb2NoZWxsZSBHb2x5XCIsIFwic2NvcmVcIjogMy4wLCBcInJldmlld3NcIjogW10gfSxcclxueyBcImlzYm5cIjogXCI3MTcwOTQ0ODAtNFwiLCBcInRpdGxlXCI6IFwiVGhlIFNwZWN0YWN1bGFyIE5vd1wiLCBcImNhdGVnb3J5XCI6IFwiTm9uZmljdGlvblwiLCBcImF1dGhvclwiOiBcIkthcmwgUXVhcmxlc3NcIiwgXCJzY29yZVwiOiAxLjYsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjgzMDUwODczNi0wXCIsIFwidGl0bGVcIjogXCJEZWJ0b2NyYWN5XCIsIFwiY2F0ZWdvcnlcIjogXCJUaHJpbGxlclwiLCBcImF1dGhvclwiOiBcIkViZXJoYXJkIFNhcnJlXCIsIFwic2NvcmVcIjogMi45LCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIiwgXCJOb3QgdG9vIGJhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjQ5MTc4MjUyMy03XCIsIFwidGl0bGVcIjogXCJBbGkgRyBJbmRhaG91c2VcIiwgXCJjYXRlZ29yeVwiOiBcIkZhbnRhc3lcIiwgXCJhdXRob3JcIjogXCJNYXJpYW5hIFRlbm5leVwiLCBcInNjb3JlXCI6IDEuOCwgXCJyZXZpZXdzXCI6IFtcIkkgYWN0dWFsbHkgcmVncmV0XCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNDA4MzU2OTU3LTNcIiwgXCJ0aXRsZVwiOiBcIkZpcnN0IFBvd2VyLCBUaGVcIiwgXCJjYXRlZ29yeVwiOiBcIkZhbnRhc3lcIiwgXCJhdXRob3JcIjogXCJBZG9yZSBHdWFyZFwiLCBcInNjb3JlXCI6IDIuMywgXCJyZXZpZXdzXCI6IFtcIk5vdCB0b28gYmFkXCIsIFwiQSBnb29kIG9uZSFcIl0gfSxcclxueyBcImlzYm5cIjogXCIzNTA1MjU5MzctM1wiLCBcInRpdGxlXCI6IFwiTG9uZG9uIC0gVGhlIE1vZGVybiBCYWJ5bG9uIFwiLCBcImNhdGVnb3J5XCI6IFwiRmljdGlvblwiLCBcImF1dGhvclwiOiBcIkRhcmxlZW4gTWNDaHJ1aXRlclwiLCBcInNjb3JlXCI6IDQuMSwgXCJyZXZpZXdzXCI6IFtcIkEgZ29vZCBvbmUhXCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNTk1OTc3MzY3LThcIiwgXCJ0aXRsZVwiOiBcIlVuZGVyY292ZXIgQmx1ZXNcIiwgXCJjYXRlZ29yeVwiOiBcIkZhbnRhc3lcIiwgXCJhdXRob3JcIjogXCJXeWxtYSBEb3d0aHdhaXRlXCIsIFwic2NvcmVcIjogNS4wLCBcInJldmlld3NcIjogW1wiSW50ZXJlc3RpbmchXCIsIFwiSSBhY3R1YWxseSByZWdyZXRcIl0gfSxcclxueyBcImlzYm5cIjogXCIzMjA2MjMzNTgtNVwiLCBcInRpdGxlXCI6IFwiVGhlIFNlY3JldCBvZiBEci4gS2lsZGFyZVwiLCBcImNhdGVnb3J5XCI6IFwiVGhyaWxsZXJcIiwgXCJhdXRob3JcIjogXCJXZW5kZWxpbmUgRGVycmljb2F0XCIsIFwic2NvcmVcIjogMS41LCBcInJldmlld3NcIjogW1wiQSBnb29kIG9uZSFcIl0gfSxcclxueyBcImlzYm5cIjogXCI4OTYwODcwNjgtNFwiLCBcInRpdGxlXCI6IFwiU3VzcGVjdFwiLCBcImNhdGVnb3J5XCI6IFwiRmljdGlvblwiLCBcImF1dGhvclwiOiBcIk1hcmNlbGEgSGFyZ3JvdmVzXCIsIFwic2NvcmVcIjogMi44LCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIiwgXCJBIGdvb2Qgb25lIVwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjUwMzQ5NDc5MC0wXCIsIFwidGl0bGVcIjogXCJEZWFuIFNwYW5sZXlcIiwgXCJjYXRlZ29yeVwiOiBcIkhvcnJvclwiLCBcImF1dGhvclwiOiBcIkdhciBGdXR0eVwiLCBcInNjb3JlXCI6IDMuOCwgXCJyZXZpZXdzXCI6IFtcIkF3ZnVsXCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiOTIzNzQ5MzY2LTVcIiwgXCJ0aXRsZVwiOiBcIk5vIExvb2tpbmcgQmFja1wiLCBcImNhdGVnb3J5XCI6IFwiSG9ycm9yXCIsIFwiYXV0aG9yXCI6IFwiTWFkZWx5biBNYXJjaGluZ3RvblwiLCBcInNjb3JlXCI6IDQuMiwgXCJyZXZpZXdzXCI6IFtcIkludGVyZXN0aW5nIVwiLCBcIkkgYWN0dWFsbHkgcmVncmV0XCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiODYyOTY3MzM5LTdcIiwgXCJ0aXRsZVwiOiBcIkxpZmUgb2YgYSBLaW5nXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiUmlra2kgVHdlZWRlXCIsIFwic2NvcmVcIjogMy41LCBcInJldmlld3NcIjogW10gfSxcclxueyBcImlzYm5cIjogXCI3MDIwOTg1NDctNVwiLCBcInRpdGxlXCI6IFwiU3VwZXIgRGVtZXRyaW9zXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiR2lmZmllIFJ1cHBlcnR6XCIsIFwic2NvcmVcIjogNC40LCBcInJldmlld3NcIjogW1wiQmVzdCBpIGhhdmUgZXZlciByZWFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiODM3NzE2MzA3LTFcIiwgXCJ0aXRsZVwiOiBcIlBhcmlzIEJsdWVzXCIsIFwiY2F0ZWdvcnlcIjogXCJUaHJpbGxlclwiLCBcImF1dGhvclwiOiBcIkRhcnlsIE1ldGhpbmdhbVwiLCBcInNjb3JlXCI6IDQuMCwgXCJyZXZpZXdzXCI6IFtcIk5vdCB0b28gYmFkXCIsIFwiQSBnb29kIG9uZSFcIiwgXCJBd2Z1bFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjM4Njg5ODkyNC0yXCIsIFwidGl0bGVcIjogXCJCbGFjayBCcmVhZCAoUGEgTmVncmUpXCIsIFwiY2F0ZWdvcnlcIjogXCJGYW50YXN5XCIsIFwiYXV0aG9yXCI6IFwiQ2F0aGVyaW4gR2lubmFsbHlcIiwgXCJzY29yZVwiOiA0LjYsIFwicmV2aWV3c1wiOiBbXCJJIGFjdHVhbGx5IHJlZ3JldFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjgyNjMyMjk4NC03XCIsIFwidGl0bGVcIjogXCJBbnRpcXVlIChTYXlhbmdrb2xkb25nIHlhbmdrd2FqYWplb20gYWVudGlrZXUpXCIsIFwiY2F0ZWdvcnlcIjogXCJUaHJpbGxlclwiLCBcImF1dGhvclwiOiBcIlJhYmJpIExlZ2dlblwiLCBcInNjb3JlXCI6IDEuMSwgXCJyZXZpZXdzXCI6IFtdIH0sXHJcbnsgXCJpc2JuXCI6IFwiODk4ODU0NTE4LTRcIiwgXCJ0aXRsZVwiOiBcIkJpbGwgQnVycjogWW91IFBlb3BsZSBBcmUgQWxsIHRoZSBTYW1lXCIsIFwiY2F0ZWdvcnlcIjogXCJUaHJpbGxlclwiLCBcImF1dGhvclwiOiBcIlBlcmwgU3R1cm1hblwiLCBcInNjb3JlXCI6IDMuOSwgXCJyZXZpZXdzXCI6IFtdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNDk5NDc5NDA3LTNcIiwgXCJ0aXRsZVwiOiBcIkRheSBvZiB0aGUgQW5pbWFsc1wiLCBcImNhdGVnb3J5XCI6IFwiRmFudGFzeVwiLCBcImF1dGhvclwiOiBcIkFubmFtYXJpYSBUb21haW5vXCIsIFwic2NvcmVcIjogNC43LCBcInJldmlld3NcIjogW1wiQXdmdWxcIiwgXCJBIGdvb2Qgb25lIVwiLCBcIkkgYWN0dWFsbHkgcmVncmV0XCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMDM2OTg5NDAxLTRcIiwgXCJ0aXRsZVwiOiBcIlBlYWNlZnVsIFdhcnJpb3JcIiwgXCJjYXRlZ29yeVwiOiBcIkZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJKdWRpdGggV2VzdG1hcmxhbmRcIiwgXCJzY29yZVwiOiAyLjgsIFwicmV2aWV3c1wiOiBbXCJBIGdvb2Qgb25lIVwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjUzOTkwMzc4MS01XCIsIFwidGl0bGVcIjogXCJEYW5nZXJvdXMgR3JvdW5kXCIsIFwiY2F0ZWdvcnlcIjogXCJOb25maWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiTW95bmEgSmFza293aWN6XCIsIFwic2NvcmVcIjogNC41LCBcInJldmlld3NcIjogW1wiTm90IHRvbyBiYWRcIiwgXCJJIGFjdHVhbGx5IHJlZ3JldFwiLCBcIkJlc3QgaSBoYXZlIGV2ZXIgcmVhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjg4ODUxMzY0MC0wXCIsIFwidGl0bGVcIjogXCJUcml1bXBoIG9mIHRoZSBOZXJkcywgVGhlOiBUaGUgUmlzZSBvZiBBY2NpZGVudGFsIEVtcGlyZXNcIiwgXCJjYXRlZ29yeVwiOiBcIk5vbmZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJaZWJlZGVlIEJhbG1hXCIsIFwic2NvcmVcIjogMi4xLCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIiwgXCJOb3QgdG9vIGJhZFwiLCBcIkludGVyZXN0aW5nIVwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjA4ODgyNzA0OS02XCIsIFwidGl0bGVcIjogXCJUaHJlZSBGYWNlcyBvZiBFdmUsIFRoZVwiLCBcImNhdGVnb3J5XCI6IFwiRmFudGFzeVwiLCBcImF1dGhvclwiOiBcIkJpYW5rYSBMZWVcIiwgXCJzY29yZVwiOiAzLjYsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjA5OTQxMjA4Ny03XCIsIFwidGl0bGVcIjogXCJUZWFycyBvZiBBcHJpbCAoS8Okc2t5KVwiLCBcImNhdGVnb3J5XCI6IFwiVGhyaWxsZXJcIiwgXCJhdXRob3JcIjogXCJBbmRvbmlzIFNhYmJpblwiLCBcInNjb3JlXCI6IDMuNiwgXCJyZXZpZXdzXCI6IFtcIk5vdCB0b28gYmFkXCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMDM1Njc5OTgxLTZcIiwgXCJ0aXRsZVwiOiBcIlRvIENyb3NzIHRoZSBSdWJpY29uXCIsIFwiY2F0ZWdvcnlcIjogXCJUaHJpbGxlclwiLCBcImF1dGhvclwiOiBcIkt1cnQgUGVybWFpblwiLCBcInNjb3JlXCI6IDMuNCwgXCJyZXZpZXdzXCI6IFtcIkludGVyZXN0aW5nIVwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjg0OTUwOTk1Ny04XCIsIFwidGl0bGVcIjogXCJNYXkgRm9vbHMgKE1pbG91IGVuIG1haSlcIiwgXCJjYXRlZ29yeVwiOiBcIk5vbmZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJNZWkgR2lybGluZ1wiLCBcInNjb3JlXCI6IDEuNywgXCJyZXZpZXdzXCI6IFtdIH0sXHJcbnsgXCJpc2JuXCI6IFwiNjQ3MjI3NDYzLTBcIiwgXCJ0aXRsZVwiOiBcIkhvdyBCcnVjZSBMZWUgQ2hhbmdlZCB0aGUgV29ybGRcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiS2F0cmluYSBXYXNzXCIsIFwic2NvcmVcIjogMy45LCBcInJldmlld3NcIjogW1wiQSBnb29kIG9uZSFcIl0gfSxcclxueyBcImlzYm5cIjogXCI1MjcwNTYxMTQtWFwiLCBcInRpdGxlXCI6IFwiWmlmdFwiLCBcImNhdGVnb3J5XCI6IFwiRmFudGFzeVwiLCBcImF1dGhvclwiOiBcIkdvbGRpIFZlc2Nvdm9cIiwgXCJzY29yZVwiOiAxLjksIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjgzNjk1OTIyOS01XCIsIFwidGl0bGVcIjogXCJLZWFuZVwiLCBcImNhdGVnb3J5XCI6IFwiTm9uZmljdGlvblwiLCBcImF1dGhvclwiOiBcIkVzdGV2YW4gSGVhcm1vblwiLCBcInNjb3JlXCI6IDMuMiwgXCJyZXZpZXdzXCI6IFtdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMTc4NDc0MDY4LTNcIiwgXCJ0aXRsZVwiOiBcIkt1bGwgdGhlIENvbnF1ZXJvclwiLCBcImNhdGVnb3J5XCI6IFwiTm9uZmljdGlvblwiLCBcImF1dGhvclwiOiBcIlphY2hlcmllIFdhcnNvcFwiLCBcInNjb3JlXCI6IDQuMCwgXCJyZXZpZXdzXCI6IFtcIkJlc3QgaSBoYXZlIGV2ZXIgcmVhZFwiLCBcIkkgYWN0dWFsbHkgcmVncmV0XCIsIFwiQSBnb29kIG9uZSFcIl0gfSxcclxueyBcImlzYm5cIjogXCIzMjk3ODU4OTgtMlwiLCBcInRpdGxlXCI6IFwiVHdvIExpdmVzIChad2VpIExlYmVuKVwiLCBcImNhdGVnb3J5XCI6IFwiVGhyaWxsZXJcIiwgXCJhdXRob3JcIjogXCJEZWxtYXIgUmFpbWVudFwiLCBcInNjb3JlXCI6IDMuMCwgXCJyZXZpZXdzXCI6IFtcIkkgYWN0dWFsbHkgcmVncmV0XCIsIFwiQXdmdWxcIl0gfSxcclxueyBcImlzYm5cIjogXCIxMDAxOTA0MjQtOVwiLCBcInRpdGxlXCI6IFwiV3JvbmcgVHVybiAzOiBMZWZ0IGZvciBEZWFkXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiRGVsaW5kYSBQaW5rc1wiLCBcInNjb3JlXCI6IDUuMCwgXCJyZXZpZXdzXCI6IFtcIkF3ZnVsXCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCIsIFwiSSBhY3R1YWxseSByZWdyZXRcIl0gfSxcclxueyBcImlzYm5cIjogXCI5NzMyMjk1MDktMFwiLCBcInRpdGxlXCI6IFwiRGV2aWwgdG8gUGF5ISwgVGhlXCIsIFwiY2F0ZWdvcnlcIjogXCJGYW50YXN5XCIsIFwiYXV0aG9yXCI6IFwiQ2FzaWUgUGxlYXNlXCIsIFwic2NvcmVcIjogMi4xLCBcInJldmlld3NcIjogW1wiQXdmdWxcIiwgXCJOb3QgdG9vIGJhZFwiLCBcIkJlc3QgaSBoYXZlIGV2ZXIgcmVhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjQzMjg2NTI3NS0zXCIsIFwidGl0bGVcIjogXCJMb25kb24gQ29uc3BpcmFjeVwiLCBcImNhdGVnb3J5XCI6IFwiVGhyaWxsZXJcIiwgXCJhdXRob3JcIjogXCJIYWdhbiBEYW5rZXJzbGV5XCIsIFwic2NvcmVcIjogMS45LCBcInJldmlld3NcIjogW1wiQXdmdWxcIl0gfSxcclxueyBcImlzYm5cIjogXCI2MzUzNTYxOTItWFwiLCBcInRpdGxlXCI6IFwiQXBhY2hlIFRlcnJpdG9yeSBcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiTWl0emkgR2FsbGVtb3JlXCIsIFwic2NvcmVcIjogMy4zLCBcInJldmlld3NcIjogW1wiQSBnb29kIG9uZSFcIiwgXCJBd2Z1bFwiLCBcIkJlc3QgaSBoYXZlIGV2ZXIgcmVhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjA4ODk4NDU0MS03XCIsIFwidGl0bGVcIjogXCJEaWFyeSBvZiBhIFdpbXB5IEtpZDogUm9kcmljayBSdWxlc1wiLCBcImNhdGVnb3J5XCI6IFwiTm9uZmljdGlvblwiLCBcImF1dGhvclwiOiBcIlZpdmllbiBIYW5kcmVrXCIsIFwic2NvcmVcIjogMi4xLCBcInJldmlld3NcIjogW1wiQXdmdWxcIiwgXCJCZXN0IGkgaGF2ZSBldmVyIHJlYWRcIiwgXCJOb3QgdG9vIGJhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjU0ODE3MTI1Mi0wXCIsIFwidGl0bGVcIjogXCJDYW1wXCIsIFwiY2F0ZWdvcnlcIjogXCJUaHJpbGxlclwiLCBcImF1dGhvclwiOiBcIkNsYXVkaWEgQ2xlbW1pdHRcIiwgXCJzY29yZVwiOiA0LjIsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjYwMjkwMDEyMy1YXCIsIFwidGl0bGVcIjogXCJDb21wYW55LCBUaGVcIiwgXCJjYXRlZ29yeVwiOiBcIk5vbmZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJNYXJpZWFubiBEdWJibGVcIiwgXCJzY29yZVwiOiAyLjAsIFwicmV2aWV3c1wiOiBbXCJBd2Z1bFwiLCBcIk5vdCB0b28gYmFkXCIsIFwiQSBnb29kIG9uZSFcIl0gfSxcclxueyBcImlzYm5cIjogXCIwNjI0NDg5MzAtMlwiLCBcInRpdGxlXCI6IFwiQXBwb2ludG1lbnQgaW4gVG9reW9cIiwgXCJjYXRlZ29yeVwiOiBcIkZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJSb3ogTGlua2xldGVyXCIsIFwic2NvcmVcIjogNC40LCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIiwgXCJJbnRlcmVzdGluZyFcIiwgXCJBd2Z1bFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjgzNjg5MDcwNS01XCIsIFwidGl0bGVcIjogXCJNaWRuaWdodCBDaHJvbmljbGVzXCIsIFwiY2F0ZWdvcnlcIjogXCJOb25maWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiU2Ftc29uIFN0dWRkXCIsIFwic2NvcmVcIjogMi40LCBcInJldmlld3NcIjogW1wiQmVzdCBpIGhhdmUgZXZlciByZWFkXCIsIFwiQXdmdWxcIiwgXCJJbnRlcmVzdGluZyFcIl0gfSxcclxueyBcImlzYm5cIjogXCIyNTAyMTgyMjQtN1wiLCBcInRpdGxlXCI6IFwiTWlzw6lyYWJsZXMsIExlc1wiLCBcImNhdGVnb3J5XCI6IFwiSG9ycm9yXCIsIFwiYXV0aG9yXCI6IFwiQW55YSBSaXNib3JvdWdoXCIsIFwic2NvcmVcIjogMS4yLCBcInJldmlld3NcIjogW1wiQXdmdWxcIiwgXCJJbnRlcmVzdGluZyFcIl0gfSxcclxueyBcImlzYm5cIjogXCIyNDI5MDY2NTYtNFwiLCBcInRpdGxlXCI6IFwiUmlkaW5nIGluIENhcnMgd2l0aCBCb3lzXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiTWF1ZGllIERpIEJhcnRvbG9tZW9cIiwgXCJzY29yZVwiOiAzLjAsIFwicmV2aWV3c1wiOiBbXCJJbnRlcmVzdGluZyFcIiwgXCJCZXN0IGkgaGF2ZSBldmVyIHJlYWRcIiwgXCJBIGdvb2Qgb25lIVwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjU2ODE0MTIzMC1YXCIsIFwidGl0bGVcIjogXCJKdWRpdGggb2YgQmV0aHVsaWFcIiwgXCJjYXRlZ29yeVwiOiBcIkZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJNYWRlbGFpbmUgUGFzaGVua292XCIsIFwic2NvcmVcIjogMS4yLCBcInJldmlld3NcIjogW1wiQmVzdCBpIGhhdmUgZXZlciByZWFkXCIsIFwiQSBnb29kIG9uZSFcIl0gfSxcclxueyBcImlzYm5cIjogXCIzNTQzMjQwNTEtWFwiLCBcInRpdGxlXCI6IFwiUmluZ3NcIiwgXCJjYXRlZ29yeVwiOiBcIkZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJSb3NhbGluZCBWYXJuYWxzXCIsIFwic2NvcmVcIjogMy42LCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIl0gfSxcclxueyBcImlzYm5cIjogXCI1MzgxNjkzNTMtMlwiLCBcInRpdGxlXCI6IFwiVmlvbGVudCBTYXR1cmRheVwiLCBcImNhdGVnb3J5XCI6IFwiSG9ycm9yXCIsIFwiYXV0aG9yXCI6IFwiWmFjaGVyaWUgRGkgUGlldHJvXCIsIFwic2NvcmVcIjogMS41LCBcInJldmlld3NcIjogW10gfSxcclxueyBcImlzYm5cIjogXCIzNzQ2ODY5NjMtM1wiLCBcInRpdGxlXCI6IFwiR2hvc3QgU2hpcCwgVGhlXCIsIFwiY2F0ZWdvcnlcIjogXCJIb3Jyb3JcIiwgXCJhdXRob3JcIjogXCJCcm9uIEJ1cmxlc1wiLCBcInNjb3JlXCI6IDQuNCwgXCJyZXZpZXdzXCI6IFtcIkkgYWN0dWFsbHkgcmVncmV0XCIsIFwiTm90IHRvbyBiYWRcIl0gfSxcclxueyBcImlzYm5cIjogXCI1Mjc4Njk3ODEtNFwiLCBcInRpdGxlXCI6IFwiUGF1bCBCbGFydDogTWFsbCBDb3BcIiwgXCJjYXRlZ29yeVwiOiBcIkZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJBbHdpbiBPJ1RpZXJuZXlcIiwgXCJzY29yZVwiOiAyLjYsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjAxNzg5ODMwOS04XCIsIFwidGl0bGVcIjogXCJMZXByZWNoYXVuIDJcIiwgXCJjYXRlZ29yeVwiOiBcIkZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJMYXcgS2lkc3RvdW5cIiwgXCJzY29yZVwiOiAxLjQsIFwicmV2aWV3c1wiOiBbXCJBd2Z1bFwiLCBcIkkgYWN0dWFsbHkgcmVncmV0XCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMjAzMDE0NjE1LTNcIiwgXCJ0aXRsZVwiOiBcIkFydCBvZiBGbGlnaHQsIFRoZVwiLCBcImNhdGVnb3J5XCI6IFwiTm9uZmljdGlvblwiLCBcImF1dGhvclwiOiBcIkJyeW5hIEVzY3JlZXRcIiwgXCJzY29yZVwiOiAzLjQsIFwicmV2aWV3c1wiOiBbXCJBIGdvb2Qgb25lIVwiLCBcIkJlc3QgaSBoYXZlIGV2ZXIgcmVhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjk0MzUxNDQxOC03XCIsIFwidGl0bGVcIjogXCJUYWxlIG9mIFRhbGVzIChTa2F6a2Egc2them9rKVwiLCBcImNhdGVnb3J5XCI6IFwiRmljdGlvblwiLCBcImF1dGhvclwiOiBcIkhheWxleSBDb2xlZ2F0ZVwiLCBcInNjb3JlXCI6IDQuNiwgXCJyZXZpZXdzXCI6IFtcIk5vdCB0b28gYmFkXCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCIsIFwiSW50ZXJlc3RpbmchXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMzI5NzM4Mzk5LTJcIiwgXCJ0aXRsZVwiOiBcIkZsYW1lIG9mIE5ldyBPcmxlYW5zLCBUaGVcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiSmFjcXVlbmV0dGUgQmVkYnJvdWdoXCIsIFwic2NvcmVcIjogMi41LCBcInJldmlld3NcIjogW10gfSxcclxueyBcImlzYm5cIjogXCI3NzU4NjA2MDgtM1wiLCBcInRpdGxlXCI6IFwiS2VlcCBXYWxraW5nIChDYW1taW5hY2FtbWluYSlcIiwgXCJjYXRlZ29yeVwiOiBcIk5vbmZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJTaGVuYSBWYXpxdWV6XCIsIFwic2NvcmVcIjogNC4zLCBcInJldmlld3NcIjogW1wiSSBhY3R1YWxseSByZWdyZXRcIl0gfSxcclxueyBcImlzYm5cIjogXCI4MDc3NDM2MjUtMFwiLCBcInRpdGxlXCI6IFwiVGFsZXMgZnJvbSB0aGUgRGFya3NpZGU6IFRoZSBNb3ZpZVwiLCBcImNhdGVnb3J5XCI6IFwiSG9ycm9yXCIsIFwiYXV0aG9yXCI6IFwiR3JvdmVyIEtldW5pbmdcIiwgXCJzY29yZVwiOiAxLjMsIFwicmV2aWV3c1wiOiBbXCJJbnRlcmVzdGluZyFcIiwgXCJBd2Z1bFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjA0MjcyNDAzNS0yXCIsIFwidGl0bGVcIjogXCJOaWNrIENhcnRlciwgTWFzdGVyIERldGVjdGl2ZVwiLCBcImNhdGVnb3J5XCI6IFwiSG9ycm9yXCIsIFwiYXV0aG9yXCI6IFwiUmFvdWwgQ2xldmVseVwiLCBcInNjb3JlXCI6IDMuMCwgXCJyZXZpZXdzXCI6IFtcIk5vdCB0b28gYmFkXCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiOTYzMjU2NzkwLTBcIiwgXCJ0aXRsZVwiOiBcIkFuZ2VscyAmIERlbW9uc1wiLCBcImNhdGVnb3J5XCI6IFwiRmljdGlvblwiLCBcImF1dGhvclwiOiBcIkJlbmV0dGEgU2FuZGJhdGNoXCIsIFwic2NvcmVcIjogMy4xLCBcInJldmlld3NcIjogW1wiQmVzdCBpIGhhdmUgZXZlciByZWFkXCIsIFwiSW50ZXJlc3RpbmchXCIsIFwiQSBnb29kIG9uZSFcIl0gfSxcclxueyBcImlzYm5cIjogXCIxNjM0NTA3MDItOVwiLCBcInRpdGxlXCI6IFwiU2hhZG93IFJpZGVycywgVGhlXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiTWFueWEgVHJlZ2lhblwiLCBcInNjb3JlXCI6IDEuMiwgXCJyZXZpZXdzXCI6IFtcIkludGVyZXN0aW5nIVwiLCBcIkEgZ29vZCBvbmUhXCIsIFwiQXdmdWxcIl0gfSxcclxueyBcImlzYm5cIjogXCI2ODkzMDA0MDktNVwiLCBcInRpdGxlXCI6IFwiUnVieSBHZW50cnlcIiwgXCJjYXRlZ29yeVwiOiBcIk5vbmZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJXYW5kaWUgVmliZXJ0XCIsIFwic2NvcmVcIjogMy45LCBcInJldmlld3NcIjogW1wiTm90IHRvbyBiYWRcIl0gfSxcclxueyBcImlzYm5cIjogXCIxMDgzMzQ2MDgtM1wiLCBcInRpdGxlXCI6IFwiTWFob25leSdzIExhc3QgU3RhbmRcIiwgXCJjYXRlZ29yeVwiOiBcIkhvcnJvclwiLCBcImF1dGhvclwiOiBcIk1hdWRlIENvd2RyZXlcIiwgXCJzY29yZVwiOiAzLjcsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjY2NTMzODE2OS0yXCIsIFwidGl0bGVcIjogXCJHYXBwYTogVGhlIFRyaXBoaWJpYW4gTW9uc3RlcnMgKEFLQSBNb25zdGVyIGZyb20gYSBQcmVoaXN0b3JpYyBQbGFuZXQpIChEYWlreW9qw7sgR2FwcGEpXCIsIFwiY2F0ZWdvcnlcIjogXCJOb25maWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiVGhlcmVzc2EgQ29sbHNcIiwgXCJzY29yZVwiOiA0LjYsIFwicmV2aWV3c1wiOiBbXCJJIGFjdHVhbGx5IHJlZ3JldFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjQwODc5MzM1Ni0zXCIsIFwidGl0bGVcIjogXCJXaGl0ZSBHb2QgKEZlaMOpciBpc3RlbilcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiQ29ycnkgS2VubmVyXCIsIFwic2NvcmVcIjogNS4wLCBcInJldmlld3NcIjogW10gfSxcclxueyBcImlzYm5cIjogXCIyMTYwMzY3ODgtNVwiLCBcInRpdGxlXCI6IFwiQ3V0dGluZyBFZGdlOiBHb2luZyBmb3IgdGhlIEdvbGQsIFRoZVwiLCBcImNhdGVnb3J5XCI6IFwiRmljdGlvblwiLCBcImF1dGhvclwiOiBcIlN0ZXBoYW5hIEtsaW1rb3ZcIiwgXCJzY29yZVwiOiAzLjIsIFwicmV2aWV3c1wiOiBbXCJJbnRlcmVzdGluZyFcIiwgXCJBIGdvb2Qgb25lIVwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjc0NjI3NjU3Ny0yXCIsIFwidGl0bGVcIjogXCJJZiBUaGVzZSBXYWxscyBDb3VsZCBUYWxrIDJcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiR2lzZWxlIEJsYWVzXCIsIFwic2NvcmVcIjogMi4yLCBcInJldmlld3NcIjogW1wiQXdmdWxcIiwgXCJBIGdvb2Qgb25lIVwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjI1MjE3NjgxMC0zXCIsIFwidGl0bGVcIjogXCJIZWF2ZW4gJiBFYXJ0aFwiLCBcImNhdGVnb3J5XCI6IFwiRmljdGlvblwiLCBcImF1dGhvclwiOiBcIkVtbHluIFRydXNkYWxlXCIsIFwic2NvcmVcIjogNC42LCBcInJldmlld3NcIjogW10gfSxcclxueyBcImlzYm5cIjogXCI5MzQ2NzEyMDMtMVwiLCBcInRpdGxlXCI6IFwiTG9hZGVkXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiRmFsaXRvIENoYXNzb25cIiwgXCJzY29yZVwiOiA0LjAsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjEyNzQ5MTM1NS0xXCIsIFwidGl0bGVcIjogXCJSb29tbWF0ZSwgVGhlXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiR3Jhbm55IFdvb2Ryb3dcIiwgXCJzY29yZVwiOiAyLjIsIFwicmV2aWV3c1wiOiBbXCJCZXN0IGkgaGF2ZSBldmVyIHJlYWRcIiwgXCJBIGdvb2Qgb25lIVwiLCBcIkkgYWN0dWFsbHkgcmVncmV0XCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMjY3MTEzMTg4LTdcIiwgXCJ0aXRsZVwiOiBcIlBhcmFkaXNlOiBGYWl0aCAoUGFyYWRpZXM6IEdsYXViZSlcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiSGFrZWVtIERlbGljYXRlXCIsIFwic2NvcmVcIjogNC40LCBcInJldmlld3NcIjogW1wiQSBnb29kIG9uZSFcIiwgXCJBd2Z1bFwiLCBcIkJlc3QgaSBoYXZlIGV2ZXIgcmVhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjkxOTEwOTQ0Ny1YXCIsIFwidGl0bGVcIjogXCJCb29rIG9mIEVsaSwgVGhlXCIsIFwiY2F0ZWdvcnlcIjogXCJGaWN0aW9uXCIsIFwiYXV0aG9yXCI6IFwiQ3VycnkgRGVnbGkgQW50b25pXCIsIFwic2NvcmVcIjogMS43LCBcInJldmlld3NcIjogW1wiSW50ZXJlc3RpbmchXCIsIFwiQSBnb29kIG9uZSFcIl0gfSxcclxueyBcImlzYm5cIjogXCI5MDQwNTIyOTktNVwiLCBcInRpdGxlXCI6IFwiTGFzdCBBbWVyaWNhbiBIZXJvLCBUaGVcIiwgXCJjYXRlZ29yeVwiOiBcIlRocmlsbGVyXCIsIFwiYXV0aG9yXCI6IFwiRW1pbGluZSBLZW1pdHRcIiwgXCJzY29yZVwiOiA0LjcsIFwicmV2aWV3c1wiOiBbXSB9LFxyXG57IFwiaXNiblwiOiBcIjczMjk2MDY1NC01XCIsIFwidGl0bGVcIjogXCJMYXN0IFJpZGUsIFRoZVwiLCBcImNhdGVnb3J5XCI6IFwiVGhyaWxsZXJcIiwgXCJhdXRob3JcIjogXCJEZXJpY2sgU2VsbFwiLCBcInNjb3JlXCI6IDMuNywgXCJyZXZpZXdzXCI6IFtcIkkgYWN0dWFsbHkgcmVncmV0XCJdIH0sXHJcbnsgXCJpc2JuXCI6IFwiMDIyNTEyNjMzLThcIiwgXCJ0aXRsZVwiOiBcIkZpdmUgU3RhciBGaW5hbFwiLCBcImNhdGVnb3J5XCI6IFwiRmFudGFzeVwiLCBcImF1dGhvclwiOiBcIkNhcnkgU3BpbGxlclwiLCBcInNjb3JlXCI6IDEuMiwgXCJyZXZpZXdzXCI6IFtcIk5vdCB0b28gYmFkXCIsIFwiSW50ZXJlc3RpbmchXCIsIFwiSSBhY3R1YWxseSByZWdyZXRcIl0gfSxcclxueyBcImlzYm5cIjogXCIyNDczNDQ1NTktMVwiLCBcInRpdGxlXCI6IFwiTGFuZCBUaGF0IFRpbWUgRm9yZ290LCBUaGVcIiwgXCJjYXRlZ29yeVwiOiBcIkZpY3Rpb25cIiwgXCJhdXRob3JcIjogXCJNYWRlbGFpbmUgTWFja2lld2ljelwiLCBcInNjb3JlXCI6IDMuNiwgXCJyZXZpZXdzXCI6IFtcIkF3ZnVsXCIsIFwiQmVzdCBpIGhhdmUgZXZlciByZWFkXCIsIFwiSSBhY3R1YWxseSByZWdyZXRcIl0gfSxcclxueyBcImlzYm5cIjogXCIwMTg3MjM5OTMtMlwiLCBcInRpdGxlXCI6IFwiU2hlJ3MgT3V0IG9mIENvbnRyb2xcIiwgXCJjYXRlZ29yeVwiOiBcIkhvcnJvclwiLCBcImF1dGhvclwiOiBcIkdhdiBNdXNrXCIsIFwic2NvcmVcIjogMy42LCBcInJldmlld3NcIjogW1wiSW50ZXJlc3RpbmchXCIsIFwiQXdmdWxcIiwgXCJOb3QgdG9vIGJhZFwiXSB9LFxyXG57IFwiaXNiblwiOiBcIjkyMDIyMTc4NS04XCIsIFwidGl0bGVcIjogXCJLYXR0IFdpbGxpYW1zOiBUaGUgUGltcCBDaHJvbmljbGVzIFB0LiAxXCIsIFwiY2F0ZWdvcnlcIjogXCJGYW50YXN5XCIsIFwiYXV0aG9yXCI6IFwiRmVyZ3VzIEluZ3J5XCIsIFwic2NvcmVcIjogMi4yLCBcInJldmlld3NcIjogW1wiQSBnb29kIG9uZSFcIl0gfV1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/data/data.ts\n");

/***/ }),

/***/ "./src/discoverBooks/discoverBooks.ts":
/*!********************************************!*\
  !*** ./src/discoverBooks/discoverBooks.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CategoryBooks = void 0;\nconst _Index_1 = __webpack_require__(/*! ../DataStructures/_Index */ \"./src/DataStructures/_Index.ts\");\nconst data_1 = __webpack_require__(/*! ../data/data */ \"./src/data/data.ts\");\n// Crear una pila para los libros pendientes\nconst pendingStack = new _Index_1.Stack(3);\n// Crear una cola para los géneros de libros\nconst genres = new _Index_1.Queue(5);\ngenres.enqueue(\"Nonfiction\");\ngenres.enqueue(\"Thriller\");\ngenres.enqueue(\"Horror\");\ngenres.enqueue(\"Fantasy\");\ngenres.enqueue(\"Fiction\");\n// Elementos del DOM\nconst results = document.getElementById(\"results\");\nconst pending = document.getElementById(\"pending\");\nconst categorySelect = document.getElementById(\"categorySelect\");\nconst removePending = document.getElementById(\"removePending\");\nconst warning = document.getElementById(\"warning\");\n/**\n * Clase que gestiona la visualización de libros por categoría y la funcionalidad de agregar libros pendientes.\n * @class\n */\nclass CategoryBooks {\n    /**\n     * Constructor de la clase CategoryBooks.\n     * @constructor\n     */\n    constructor() {\n        // Elementos del DOM\n        this.categoryBooks = document.getElementById(\"categoryBooks\");\n        this.next = document.getElementById(\"next\");\n        // Inicializar los eventos y muestra los libros de la categoría seleccionada\n        this.initializeEventListeners();\n        this.showCategoryBooks();\n    }\n    // Inicializa los event listeners para los elementos del DOM.\n    initializeEventListeners() {\n        this.categoryBooks.addEventListener(\"change\", () => this.showCategoryBooks());\n        this.next.addEventListener(\"click\", () => this.moveToNextCategory());\n        removePending.addEventListener('click', () => this.removePendingBook());\n    }\n    // Muestra los libros de la categoría seleccionada.\n    showCategoryBooks() {\n        categorySelect.textContent = this.categoryBooks.value;\n        this.clearResults();\n        // Filtra y muestra los libros de la categoría seleccionada\n        data_1.libros.forEach(book => {\n            if (book.category === this.categoryBooks.value) {\n                this.renderBook(book);\n            }\n        });\n    }\n    // Limpia los resultados de la búsqueda.\n    clearResults() {\n        while (results.firstChild) {\n            results.removeChild(results.firstChild);\n        }\n    }\n    /**\n     * Renderiza un libro en la interfaz de usuario.\n     * @param {object} book - Información del libro a renderizar.\n     */\n    renderBook(book) {\n        const item = document.createElement(\"li\");\n        const addButton = document.createElement(\"button\");\n        const filteredContent = document.createElement(\"div\");\n        filteredContent.classList.add(\"filteredContent\");\n        addButton.textContent = \"Add to pending\";\n        addButton.id = `addButton${book.isbn}`;\n        item.textContent = `Title: ${book.title}`;\n        // Agrega un event listener para agregar el libro a la lista de pendientes\n        addButton.addEventListener('click', () => this.addToPending(book));\n        filteredContent.appendChild(item);\n        filteredContent.appendChild(addButton);\n        results.appendChild(filteredContent);\n    }\n    /**\n     * Agrega un libro a la lista de pendientes.\n     * @param {object} book - Libro a agregar a la lista de pendientes.\n     */\n    addToPending(book) {\n        if (pendingStack.full()) {\n            this.showWarning();\n        }\n        else {\n            const bookInfo = `<strong>Author:</strong> ${book.author} <br><strong>Title:</strong> ${book.title}`;\n            pendingStack.push(bookInfo);\n            const itemPending = document.createElement(\"li\");\n            itemPending.innerHTML = `${pendingStack.topElement()}`;\n            pending.appendChild(itemPending);\n        }\n    }\n    // Remueve un libro de la lista de pendientes.\n    removePendingBook() {\n        if (pendingStack.getTop()) {\n            pendingStack.pop();\n            if (pending.firstElementChild)\n                pending.removeChild(pending.firstElementChild);\n            warning.textContent = \"\";\n        }\n    }\n    // Muestra una advertencia cuando se alcanza el límite de libros pendientes.\n    showWarning() {\n        warning.textContent = \"Maximum number of books reached\";\n    }\n    // Avanza a la siguiente categoría de libros.\n    moveToNextCategory() {\n        const currentItem = genres.dequeue();\n        this.categoryBooks.value = `${currentItem}`;\n        genres.enqueue(currentItem);\n        this.showCategoryBooks();\n    }\n}\nexports.CategoryBooks = CategoryBooks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/discoverBooks/discoverBooks.ts\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst discoverBooks_1 = __webpack_require__(/*! ./discoverBooks/discoverBooks */ \"./src/discoverBooks/discoverBooks.ts\");\nwindow.addEventListener(\"load\", () => {\n    const category = new discoverBooks_1.CategoryBooks();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx5SEFBOEQ7QUFFOUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7SUFDakMsTUFBTSxRQUFRLEdBQUcsSUFBSSw2QkFBYSxFQUFFLENBQUM7QUFDekMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vRFMtUHJvamVjdDIvLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYXRlZ29yeUJvb2tzIH0gZnJvbSBcIi4vZGlzY292ZXJCb29rcy9kaXNjb3ZlckJvb2tzXCI7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgY2F0ZWdvcnkgPSBuZXcgQ2F0ZWdvcnlCb29rcygpO1xyXG59KVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;